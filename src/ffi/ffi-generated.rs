/* automatically generated by rust-bindgen 0.54.1 */

pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type size_t = ::std::os::raw::c_ulong;
pub type FILE = _IO_FILE;
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    pub _next: *mut _IO_marker,
    pub _sbuf: *mut _IO_FILE,
    pub _pos: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__IO_marker() {
    assert_eq!(
        ::std::mem::size_of::<_IO_marker>(),
        24usize,
        concat!("Size of: ", stringify!(_IO_marker))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_marker>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_marker))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_marker>()))._next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_marker),
            "::",
            stringify!(_next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_marker>()))._sbuf as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_marker),
            "::",
            stringify!(_sbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_marker>()))._pos as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_marker),
            "::",
            stringify!(_pos)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub __pad1: *mut ::std::os::raw::c_void,
    pub __pad2: *mut ::std::os::raw::c_void,
    pub __pad3: *mut ::std::os::raw::c_void,
    pub __pad4: *mut ::std::os::raw::c_void,
    pub __pad5: size_t,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[test]
fn bindgen_test_layout__IO_FILE() {
    assert_eq!(
        ::std::mem::size_of::<_IO_FILE>(),
        216usize,
        concat!("Size of: ", stringify!(_IO_FILE))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_FILE>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_FILE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_ptr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_end as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_base as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_base as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_ptr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_end as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_base as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_end as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_base as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_backup_base as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_backup_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_end as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._markers as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_markers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._chain as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_chain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._fileno as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_fileno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags2 as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._old_offset as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_old_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._cur_column as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_cur_column)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._vtable_offset as *const _ as usize },
        130usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_vtable_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._shortbuf as *const _ as usize },
        131usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_shortbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._lock as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._offset as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad1 as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad2 as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad3 as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad4 as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad4)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad5 as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad5)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._mode as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._unused2 as *const _ as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_unused2)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_auxdata {
    pub size: size_t,
    pub ptr: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_sp_auxdata() {
    assert_eq!(
        ::std::mem::size_of::<sp_auxdata>(),
        16usize,
        concat!("Size of: ", stringify!(sp_auxdata))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_auxdata>(),
        8usize,
        concat!("Alignment of ", stringify!(sp_auxdata))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_auxdata>())).size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_auxdata),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_auxdata>())).ptr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_auxdata),
            "::",
            stringify!(ptr)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sp_data {
    pub out: *mut f32,
    pub sr: ::std::os::raw::c_int,
    pub nchan: ::std::os::raw::c_int,
    pub len: ::std::os::raw::c_ulong,
    pub pos: ::std::os::raw::c_ulong,
    pub filename: [::std::os::raw::c_char; 200usize],
    pub rand: u32,
}
#[test]
fn bindgen_test_layout_sp_data() {
    assert_eq!(
        ::std::mem::size_of::<sp_data>(),
        240usize,
        concat!("Size of: ", stringify!(sp_data))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_data>(),
        8usize,
        concat!("Alignment of ", stringify!(sp_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_data>())).out as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_data),
            "::",
            stringify!(out)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_data>())).sr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_data),
            "::",
            stringify!(sr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_data>())).nchan as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_data),
            "::",
            stringify!(nchan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_data>())).len as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_data),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_data>())).pos as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_data),
            "::",
            stringify!(pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_data>())).filename as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_data),
            "::",
            stringify!(filename)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_data>())).rand as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_data),
            "::",
            stringify!(rand)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_param {
    pub state: ::std::os::raw::c_char,
    pub val: f32,
}
#[test]
fn bindgen_test_layout_sp_param() {
    assert_eq!(
        ::std::mem::size_of::<sp_param>(),
        8usize,
        concat!("Size of: ", stringify!(sp_param))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_param>(),
        4usize,
        concat!("Alignment of ", stringify!(sp_param))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_param>())).state as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_param),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_param>())).val as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_param),
            "::",
            stringify!(val)
        )
    );
}
extern "C" {
    pub fn sp_auxdata_alloc(aux: *mut sp_auxdata, size: size_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_auxdata_free(aux: *mut sp_auxdata) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_create(spp: *mut *mut sp_data) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_createn(
        spp: *mut *mut sp_data,
        nchan: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_destroy(spp: *mut *mut sp_data) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_process(
        sp: *mut sp_data,
        ud: *mut ::std::os::raw::c_void,
        callback: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut sp_data, arg2: *mut ::std::os::raw::c_void),
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_process_raw(
        sp: *mut sp_data,
        ud: *mut ::std::os::raw::c_void,
        callback: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut sp_data, arg2: *mut ::std::os::raw::c_void),
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_process_plot(
        sp: *mut sp_data,
        ud: *mut ::std::os::raw::c_void,
        callback: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut sp_data, arg2: *mut ::std::os::raw::c_void),
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_process_spa(
        sp: *mut sp_data,
        ud: *mut ::std::os::raw::c_void,
        callback: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut sp_data, arg2: *mut ::std::os::raw::c_void),
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_midi2cps(nn: f32) -> f32;
}
extern "C" {
    pub fn sp_set(p: *mut sp_param, val: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_out(sp: *mut sp_data, chan: u32, val: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_rand(sp: *mut sp_data) -> u32;
}
extern "C" {
    pub fn sp_srand(sp: *mut sp_data, val: u32);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_fft {
    pub utbl: *mut f32,
    pub BRLow: *mut i16,
    pub BRLowCpx: *mut i16,
}
#[test]
fn bindgen_test_layout_sp_fft() {
    assert_eq!(
        ::std::mem::size_of::<sp_fft>(),
        24usize,
        concat!("Size of: ", stringify!(sp_fft))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_fft>(),
        8usize,
        concat!("Alignment of ", stringify!(sp_fft))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_fft>())).utbl as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_fft),
            "::",
            stringify!(utbl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_fft>())).BRLow as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_fft),
            "::",
            stringify!(BRLow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_fft>())).BRLowCpx as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_fft),
            "::",
            stringify!(BRLowCpx)
        )
    );
}
extern "C" {
    pub fn sp_fft_init(fft: *mut sp_fft, M: ::std::os::raw::c_int);
}
extern "C" {
    pub fn sp_fftr(fft: *mut sp_fft, buf: *mut f32, FFTsize: ::std::os::raw::c_int);
}
extern "C" {
    pub fn sp_fft_cpx(fft: *mut sp_fft, buf: *mut f32, FFTsize: ::std::os::raw::c_int);
}
extern "C" {
    pub fn sp_ifftr(fft: *mut sp_fft, buf: *mut f32, FFTsize: ::std::os::raw::c_int);
}
extern "C" {
    pub fn sp_fft_destroy(fft: *mut sp_fft);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kiss_fft_cpx {
    pub r: f32,
    pub i: f32,
}
#[test]
fn bindgen_test_layout_kiss_fft_cpx() {
    assert_eq!(
        ::std::mem::size_of::<kiss_fft_cpx>(),
        8usize,
        concat!("Size of: ", stringify!(kiss_fft_cpx))
    );
    assert_eq!(
        ::std::mem::align_of::<kiss_fft_cpx>(),
        4usize,
        concat!("Alignment of ", stringify!(kiss_fft_cpx))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kiss_fft_cpx>())).r as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(kiss_fft_cpx),
            "::",
            stringify!(r)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kiss_fft_cpx>())).i as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(kiss_fft_cpx),
            "::",
            stringify!(i)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kiss_fftr_state {
    _unused: [u8; 0],
}
pub type kiss_fftr_cfg = *mut kiss_fftr_state;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct spa_header {
    pub magic: ::std::os::raw::c_char,
    pub nchan: ::std::os::raw::c_char,
    pub sr: u16,
    pub len: u32,
}
#[test]
fn bindgen_test_layout_spa_header() {
    assert_eq!(
        ::std::mem::size_of::<spa_header>(),
        8usize,
        concat!("Size of: ", stringify!(spa_header))
    );
    assert_eq!(
        ::std::mem::align_of::<spa_header>(),
        4usize,
        concat!("Alignment of ", stringify!(spa_header))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<spa_header>())).magic as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(spa_header),
            "::",
            stringify!(magic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<spa_header>())).nchan as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(spa_header),
            "::",
            stringify!(nchan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<spa_header>())).sr as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(spa_header),
            "::",
            stringify!(sr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<spa_header>())).len as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(spa_header),
            "::",
            stringify!(len)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_audio {
    pub header: spa_header,
    pub offset: size_t,
    pub mode: ::std::os::raw::c_int,
    pub fp: *mut FILE,
    pub pos: u32,
}
#[test]
fn bindgen_test_layout_sp_audio() {
    assert_eq!(
        ::std::mem::size_of::<sp_audio>(),
        40usize,
        concat!("Size of: ", stringify!(sp_audio))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_audio>(),
        8usize,
        concat!("Alignment of ", stringify!(sp_audio))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_audio>())).header as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_audio),
            "::",
            stringify!(header)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_audio>())).offset as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_audio),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_audio>())).mode as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_audio),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_audio>())).fp as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_audio),
            "::",
            stringify!(fp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_audio>())).pos as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_audio),
            "::",
            stringify!(pos)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_ftbl {
    pub size: size_t,
    pub lobits: u32,
    pub lomask: u32,
    pub lodiv: f32,
    pub sicvt: f32,
    pub tbl: *mut f32,
    pub del: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_sp_ftbl() {
    assert_eq!(
        ::std::mem::size_of::<sp_ftbl>(),
        40usize,
        concat!("Size of: ", stringify!(sp_ftbl))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_ftbl>(),
        8usize,
        concat!("Alignment of ", stringify!(sp_ftbl))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_ftbl>())).size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_ftbl),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_ftbl>())).lobits as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_ftbl),
            "::",
            stringify!(lobits)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_ftbl>())).lomask as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_ftbl),
            "::",
            stringify!(lomask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_ftbl>())).lodiv as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_ftbl),
            "::",
            stringify!(lodiv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_ftbl>())).sicvt as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_ftbl),
            "::",
            stringify!(sicvt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_ftbl>())).tbl as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_ftbl),
            "::",
            stringify!(tbl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_ftbl>())).del as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_ftbl),
            "::",
            stringify!(del)
        )
    );
}
extern "C" {
    pub fn sp_ftbl_create(
        sp: *mut sp_data,
        ft: *mut *mut sp_ftbl,
        size: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_ftbl_init(sp: *mut sp_data, ft: *mut sp_ftbl, size: size_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_ftbl_bind(
        sp: *mut sp_data,
        ft: *mut *mut sp_ftbl,
        tbl: *mut f32,
        size: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_ftbl_destroy(ft: *mut *mut sp_ftbl) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_gen_vals(
        sp: *mut sp_data,
        ft: *mut sp_ftbl,
        string: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_gen_sine(sp: *mut sp_data, ft: *mut sp_ftbl) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_gen_file(
        sp: *mut sp_data,
        ft: *mut sp_ftbl,
        filename: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_gen_sinesum(
        sp: *mut sp_data,
        ft: *mut sp_ftbl,
        argstring: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_gen_line(
        sp: *mut sp_data,
        ft: *mut sp_ftbl,
        argstring: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_gen_xline(
        sp: *mut sp_data,
        ft: *mut sp_ftbl,
        argstring: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_gen_gauss(
        sp: *mut sp_data,
        ft: *mut sp_ftbl,
        scale: f32,
        seed: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_ftbl_loadfile(
        sp: *mut sp_data,
        ft: *mut *mut sp_ftbl,
        filename: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_ftbl_loadspa(
        sp: *mut sp_data,
        ft: *mut *mut sp_ftbl,
        filename: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_gen_composite(
        sp: *mut sp_data,
        ft: *mut sp_ftbl,
        argstring: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_gen_rand(
        sp: *mut sp_data,
        ft: *mut sp_ftbl,
        argstring: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_gen_triangle(sp: *mut sp_data, ft: *mut sp_ftbl) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_tevent {
    pub reinit: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub compute: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void, out: *mut f32),
    >,
    pub ud: *mut ::std::os::raw::c_void,
    pub started: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sp_tevent() {
    assert_eq!(
        ::std::mem::size_of::<sp_tevent>(),
        32usize,
        concat!("Size of: ", stringify!(sp_tevent))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_tevent>(),
        8usize,
        concat!("Alignment of ", stringify!(sp_tevent))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_tevent>())).reinit as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_tevent),
            "::",
            stringify!(reinit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_tevent>())).compute as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_tevent),
            "::",
            stringify!(compute)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_tevent>())).ud as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_tevent),
            "::",
            stringify!(ud)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_tevent>())).started as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_tevent),
            "::",
            stringify!(started)
        )
    );
}
extern "C" {
    pub fn sp_tevent_create(te: *mut *mut sp_tevent) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_tevent_destroy(te: *mut *mut sp_tevent) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_tevent_init(
        sp: *mut sp_data,
        te: *mut sp_tevent,
        reinit: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
        compute: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void, out: *mut f32),
        >,
        ud: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_tevent_compute(
        sp: *mut sp_data,
        te: *mut sp_tevent,
        in_: *mut f32,
        out: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_adsr {
    pub atk: f32,
    pub dec: f32,
    pub sus: f32,
    pub rel: f32,
    pub timer: u32,
    pub atk_time: u32,
    pub a: f32,
    pub b: f32,
    pub y: f32,
    pub x: f32,
    pub prev: f32,
    pub mode: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sp_adsr() {
    assert_eq!(
        ::std::mem::size_of::<sp_adsr>(),
        48usize,
        concat!("Size of: ", stringify!(sp_adsr))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_adsr>(),
        4usize,
        concat!("Alignment of ", stringify!(sp_adsr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_adsr>())).atk as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_adsr),
            "::",
            stringify!(atk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_adsr>())).dec as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_adsr),
            "::",
            stringify!(dec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_adsr>())).sus as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_adsr),
            "::",
            stringify!(sus)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_adsr>())).rel as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_adsr),
            "::",
            stringify!(rel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_adsr>())).timer as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_adsr),
            "::",
            stringify!(timer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_adsr>())).atk_time as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_adsr),
            "::",
            stringify!(atk_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_adsr>())).a as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_adsr),
            "::",
            stringify!(a)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_adsr>())).b as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_adsr),
            "::",
            stringify!(b)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_adsr>())).y as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_adsr),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_adsr>())).x as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_adsr),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_adsr>())).prev as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_adsr),
            "::",
            stringify!(prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_adsr>())).mode as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_adsr),
            "::",
            stringify!(mode)
        )
    );
}
extern "C" {
    pub fn sp_adsr_create(p: *mut *mut sp_adsr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_adsr_destroy(p: *mut *mut sp_adsr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_adsr_init(sp: *mut sp_data, p: *mut sp_adsr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_adsr_compute(
        sp: *mut sp_data,
        p: *mut sp_adsr,
        in_: *mut f32,
        out: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_allpass {
    pub revtime: f32,
    pub looptime: f32,
    pub coef: f32,
    pub prvt: f32,
    pub aux: sp_auxdata,
    pub bufpos: u32,
    pub bufsize: u32,
}
#[test]
fn bindgen_test_layout_sp_allpass() {
    assert_eq!(
        ::std::mem::size_of::<sp_allpass>(),
        40usize,
        concat!("Size of: ", stringify!(sp_allpass))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_allpass>(),
        8usize,
        concat!("Alignment of ", stringify!(sp_allpass))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_allpass>())).revtime as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_allpass),
            "::",
            stringify!(revtime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_allpass>())).looptime as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_allpass),
            "::",
            stringify!(looptime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_allpass>())).coef as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_allpass),
            "::",
            stringify!(coef)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_allpass>())).prvt as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_allpass),
            "::",
            stringify!(prvt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_allpass>())).aux as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_allpass),
            "::",
            stringify!(aux)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_allpass>())).bufpos as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_allpass),
            "::",
            stringify!(bufpos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_allpass>())).bufsize as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_allpass),
            "::",
            stringify!(bufsize)
        )
    );
}
extern "C" {
    pub fn sp_allpass_create(p: *mut *mut sp_allpass) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_allpass_destroy(p: *mut *mut sp_allpass) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_allpass_init(
        sp: *mut sp_data,
        p: *mut sp_allpass,
        looptime: f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_allpass_compute(
        sp: *mut sp_data,
        p: *mut sp_allpass,
        in_: *mut f32,
        out: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_atone {
    pub hp: f32,
    pub c1: f32,
    pub c2: f32,
    pub yt1: f32,
    pub prvhp: f32,
    pub tpidsr: f32,
}
#[test]
fn bindgen_test_layout_sp_atone() {
    assert_eq!(
        ::std::mem::size_of::<sp_atone>(),
        24usize,
        concat!("Size of: ", stringify!(sp_atone))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_atone>(),
        4usize,
        concat!("Alignment of ", stringify!(sp_atone))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_atone>())).hp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_atone),
            "::",
            stringify!(hp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_atone>())).c1 as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_atone),
            "::",
            stringify!(c1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_atone>())).c2 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_atone),
            "::",
            stringify!(c2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_atone>())).yt1 as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_atone),
            "::",
            stringify!(yt1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_atone>())).prvhp as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_atone),
            "::",
            stringify!(prvhp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_atone>())).tpidsr as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_atone),
            "::",
            stringify!(tpidsr)
        )
    );
}
extern "C" {
    pub fn sp_atone_create(p: *mut *mut sp_atone) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_atone_destroy(p: *mut *mut sp_atone) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_atone_init(sp: *mut sp_data, p: *mut sp_atone) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_atone_compute(
        sp: *mut sp_data,
        p: *mut sp_atone,
        in_: *mut f32,
        out: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_autowah {
    pub faust: *mut ::std::os::raw::c_void,
    pub argpos: ::std::os::raw::c_int,
    pub args: [*mut f32; 3usize],
    pub level: *mut f32,
    pub wah: *mut f32,
    pub mix: *mut f32,
}
#[test]
fn bindgen_test_layout_sp_autowah() {
    assert_eq!(
        ::std::mem::size_of::<sp_autowah>(),
        64usize,
        concat!("Size of: ", stringify!(sp_autowah))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_autowah>(),
        8usize,
        concat!("Alignment of ", stringify!(sp_autowah))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_autowah>())).faust as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_autowah),
            "::",
            stringify!(faust)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_autowah>())).argpos as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_autowah),
            "::",
            stringify!(argpos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_autowah>())).args as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_autowah),
            "::",
            stringify!(args)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_autowah>())).level as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_autowah),
            "::",
            stringify!(level)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_autowah>())).wah as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_autowah),
            "::",
            stringify!(wah)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_autowah>())).mix as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_autowah),
            "::",
            stringify!(mix)
        )
    );
}
extern "C" {
    pub fn sp_autowah_create(p: *mut *mut sp_autowah) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_autowah_destroy(p: *mut *mut sp_autowah) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_autowah_init(sp: *mut sp_data, p: *mut sp_autowah) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_autowah_compute(
        sp: *mut sp_data,
        p: *mut sp_autowah,
        in_: *mut f32,
        out: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_bal {
    pub asig: f32,
    pub csig: f32,
    pub ihp: f32,
    pub c1: f32,
    pub c2: f32,
    pub prvq: f32,
    pub prvr: f32,
    pub prva: f32,
}
#[test]
fn bindgen_test_layout_sp_bal() {
    assert_eq!(
        ::std::mem::size_of::<sp_bal>(),
        32usize,
        concat!("Size of: ", stringify!(sp_bal))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_bal>(),
        4usize,
        concat!("Alignment of ", stringify!(sp_bal))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_bal>())).asig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_bal),
            "::",
            stringify!(asig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_bal>())).csig as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_bal),
            "::",
            stringify!(csig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_bal>())).ihp as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_bal),
            "::",
            stringify!(ihp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_bal>())).c1 as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_bal),
            "::",
            stringify!(c1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_bal>())).c2 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_bal),
            "::",
            stringify!(c2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_bal>())).prvq as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_bal),
            "::",
            stringify!(prvq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_bal>())).prvr as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_bal),
            "::",
            stringify!(prvr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_bal>())).prva as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_bal),
            "::",
            stringify!(prva)
        )
    );
}
extern "C" {
    pub fn sp_bal_create(p: *mut *mut sp_bal) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_bal_destroy(p: *mut *mut sp_bal) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_bal_init(sp: *mut sp_data, p: *mut sp_bal) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_bal_compute(
        sp: *mut sp_data,
        p: *mut sp_bal,
        sig: *mut f32,
        comp: *mut f32,
        out: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_bar {
    pub bcL: f32,
    pub bcR: f32,
    pub iK: f32,
    pub ib: f32,
    pub scan: f32,
    pub T30: f32,
    pub pos: f32,
    pub vel: f32,
    pub wid: f32,
    pub w: *mut f32,
    pub w1: *mut f32,
    pub w2: *mut f32,
    pub step: ::std::os::raw::c_int,
    pub first: ::std::os::raw::c_int,
    pub s0: f32,
    pub s1: f32,
    pub s2: f32,
    pub t0: f32,
    pub t1: f32,
    pub i_bcL: ::std::os::raw::c_int,
    pub i_bcR: ::std::os::raw::c_int,
    pub N: ::std::os::raw::c_int,
    pub w_aux: sp_auxdata,
}
#[test]
fn bindgen_test_layout_sp_bar() {
    assert_eq!(
        ::std::mem::size_of::<sp_bar>(),
        120usize,
        concat!("Size of: ", stringify!(sp_bar))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_bar>(),
        8usize,
        concat!("Alignment of ", stringify!(sp_bar))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_bar>())).bcL as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_bar),
            "::",
            stringify!(bcL)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_bar>())).bcR as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_bar),
            "::",
            stringify!(bcR)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_bar>())).iK as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_bar),
            "::",
            stringify!(iK)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_bar>())).ib as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_bar),
            "::",
            stringify!(ib)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_bar>())).scan as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_bar),
            "::",
            stringify!(scan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_bar>())).T30 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_bar),
            "::",
            stringify!(T30)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_bar>())).pos as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_bar),
            "::",
            stringify!(pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_bar>())).vel as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_bar),
            "::",
            stringify!(vel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_bar>())).wid as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_bar),
            "::",
            stringify!(wid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_bar>())).w as *const _ as usize },
        40usize,
        concat!("Offset of field: ", stringify!(sp_bar), "::", stringify!(w))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_bar>())).w1 as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_bar),
            "::",
            stringify!(w1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_bar>())).w2 as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_bar),
            "::",
            stringify!(w2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_bar>())).step as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_bar),
            "::",
            stringify!(step)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_bar>())).first as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_bar),
            "::",
            stringify!(first)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_bar>())).s0 as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_bar),
            "::",
            stringify!(s0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_bar>())).s1 as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_bar),
            "::",
            stringify!(s1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_bar>())).s2 as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_bar),
            "::",
            stringify!(s2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_bar>())).t0 as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_bar),
            "::",
            stringify!(t0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_bar>())).t1 as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_bar),
            "::",
            stringify!(t1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_bar>())).i_bcL as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_bar),
            "::",
            stringify!(i_bcL)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_bar>())).i_bcR as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_bar),
            "::",
            stringify!(i_bcR)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_bar>())).N as *const _ as usize },
        100usize,
        concat!("Offset of field: ", stringify!(sp_bar), "::", stringify!(N))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_bar>())).w_aux as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_bar),
            "::",
            stringify!(w_aux)
        )
    );
}
extern "C" {
    pub fn sp_bar_create(p: *mut *mut sp_bar) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_bar_destroy(p: *mut *mut sp_bar) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_bar_init(sp: *mut sp_data, p: *mut sp_bar, iK: f32, ib: f32)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_bar_compute(
        sp: *mut sp_data,
        p: *mut sp_bar,
        in_: *mut f32,
        out: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_biquad {
    pub b0: f32,
    pub b1: f32,
    pub b2: f32,
    pub a0: f32,
    pub a1: f32,
    pub a2: f32,
    pub reinit: f32,
    pub xnm1: f32,
    pub xnm2: f32,
    pub ynm1: f32,
    pub ynm2: f32,
    pub cutoff: f32,
    pub res: f32,
    pub sr: f32,
    pub tpidsr: f32,
}
#[test]
fn bindgen_test_layout_sp_biquad() {
    assert_eq!(
        ::std::mem::size_of::<sp_biquad>(),
        60usize,
        concat!("Size of: ", stringify!(sp_biquad))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_biquad>(),
        4usize,
        concat!("Alignment of ", stringify!(sp_biquad))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_biquad>())).b0 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_biquad),
            "::",
            stringify!(b0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_biquad>())).b1 as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_biquad),
            "::",
            stringify!(b1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_biquad>())).b2 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_biquad),
            "::",
            stringify!(b2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_biquad>())).a0 as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_biquad),
            "::",
            stringify!(a0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_biquad>())).a1 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_biquad),
            "::",
            stringify!(a1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_biquad>())).a2 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_biquad),
            "::",
            stringify!(a2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_biquad>())).reinit as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_biquad),
            "::",
            stringify!(reinit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_biquad>())).xnm1 as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_biquad),
            "::",
            stringify!(xnm1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_biquad>())).xnm2 as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_biquad),
            "::",
            stringify!(xnm2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_biquad>())).ynm1 as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_biquad),
            "::",
            stringify!(ynm1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_biquad>())).ynm2 as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_biquad),
            "::",
            stringify!(ynm2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_biquad>())).cutoff as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_biquad),
            "::",
            stringify!(cutoff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_biquad>())).res as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_biquad),
            "::",
            stringify!(res)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_biquad>())).sr as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_biquad),
            "::",
            stringify!(sr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_biquad>())).tpidsr as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_biquad),
            "::",
            stringify!(tpidsr)
        )
    );
}
extern "C" {
    pub fn sp_biquad_create(p: *mut *mut sp_biquad) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_biquad_destroy(p: *mut *mut sp_biquad) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_biquad_init(sp: *mut sp_data, p: *mut sp_biquad) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_biquad_compute(
        sp: *mut sp_data,
        p: *mut sp_biquad,
        in_: *mut f32,
        out: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_biscale {
    pub min: f32,
    pub max: f32,
}
#[test]
fn bindgen_test_layout_sp_biscale() {
    assert_eq!(
        ::std::mem::size_of::<sp_biscale>(),
        8usize,
        concat!("Size of: ", stringify!(sp_biscale))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_biscale>(),
        4usize,
        concat!("Alignment of ", stringify!(sp_biscale))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_biscale>())).min as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_biscale),
            "::",
            stringify!(min)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_biscale>())).max as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_biscale),
            "::",
            stringify!(max)
        )
    );
}
extern "C" {
    pub fn sp_biscale_create(p: *mut *mut sp_biscale) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_biscale_destroy(p: *mut *mut sp_biscale) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_biscale_init(sp: *mut sp_data, p: *mut sp_biscale) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_biscale_compute(
        sp: *mut sp_data,
        p: *mut sp_biscale,
        in_: *mut f32,
        out: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_blsaw {
    pub ud: *mut ::std::os::raw::c_void,
    pub argpos: ::std::os::raw::c_int,
    pub args: [*mut f32; 2usize],
    pub freq: *mut f32,
    pub amp: *mut f32,
}
#[test]
fn bindgen_test_layout_sp_blsaw() {
    assert_eq!(
        ::std::mem::size_of::<sp_blsaw>(),
        48usize,
        concat!("Size of: ", stringify!(sp_blsaw))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_blsaw>(),
        8usize,
        concat!("Alignment of ", stringify!(sp_blsaw))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_blsaw>())).ud as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_blsaw),
            "::",
            stringify!(ud)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_blsaw>())).argpos as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_blsaw),
            "::",
            stringify!(argpos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_blsaw>())).args as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_blsaw),
            "::",
            stringify!(args)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_blsaw>())).freq as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_blsaw),
            "::",
            stringify!(freq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_blsaw>())).amp as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_blsaw),
            "::",
            stringify!(amp)
        )
    );
}
extern "C" {
    pub fn sp_blsaw_create(p: *mut *mut sp_blsaw) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_blsaw_destroy(p: *mut *mut sp_blsaw) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_blsaw_init(sp: *mut sp_data, p: *mut sp_blsaw) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_blsaw_compute(
        sp: *mut sp_data,
        p: *mut sp_blsaw,
        in_: *mut f32,
        out: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_blsquare {
    pub ud: *mut ::std::os::raw::c_void,
    pub argpos: ::std::os::raw::c_int,
    pub args: [*mut f32; 3usize],
    pub freq: *mut f32,
    pub amp: *mut f32,
    pub width: *mut f32,
}
#[test]
fn bindgen_test_layout_sp_blsquare() {
    assert_eq!(
        ::std::mem::size_of::<sp_blsquare>(),
        64usize,
        concat!("Size of: ", stringify!(sp_blsquare))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_blsquare>(),
        8usize,
        concat!("Alignment of ", stringify!(sp_blsquare))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_blsquare>())).ud as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_blsquare),
            "::",
            stringify!(ud)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_blsquare>())).argpos as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_blsquare),
            "::",
            stringify!(argpos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_blsquare>())).args as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_blsquare),
            "::",
            stringify!(args)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_blsquare>())).freq as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_blsquare),
            "::",
            stringify!(freq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_blsquare>())).amp as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_blsquare),
            "::",
            stringify!(amp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_blsquare>())).width as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_blsquare),
            "::",
            stringify!(width)
        )
    );
}
extern "C" {
    pub fn sp_blsquare_create(p: *mut *mut sp_blsquare) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_blsquare_destroy(p: *mut *mut sp_blsquare) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_blsquare_init(sp: *mut sp_data, p: *mut sp_blsquare) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_blsquare_compute(
        sp: *mut sp_data,
        p: *mut sp_blsquare,
        in_: *mut f32,
        out: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_bltriangle {
    pub ud: *mut ::std::os::raw::c_void,
    pub argpos: ::std::os::raw::c_int,
    pub args: [*mut f32; 2usize],
    pub freq: *mut f32,
    pub amp: *mut f32,
}
#[test]
fn bindgen_test_layout_sp_bltriangle() {
    assert_eq!(
        ::std::mem::size_of::<sp_bltriangle>(),
        48usize,
        concat!("Size of: ", stringify!(sp_bltriangle))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_bltriangle>(),
        8usize,
        concat!("Alignment of ", stringify!(sp_bltriangle))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_bltriangle>())).ud as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_bltriangle),
            "::",
            stringify!(ud)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_bltriangle>())).argpos as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_bltriangle),
            "::",
            stringify!(argpos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_bltriangle>())).args as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_bltriangle),
            "::",
            stringify!(args)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_bltriangle>())).freq as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_bltriangle),
            "::",
            stringify!(freq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_bltriangle>())).amp as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_bltriangle),
            "::",
            stringify!(amp)
        )
    );
}
extern "C" {
    pub fn sp_bltriangle_create(p: *mut *mut sp_bltriangle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_bltriangle_destroy(p: *mut *mut sp_bltriangle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_bltriangle_init(sp: *mut sp_data, p: *mut sp_bltriangle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_bltriangle_compute(
        sp: *mut sp_data,
        p: *mut sp_bltriangle,
        in_: *mut f32,
        out: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_fold {
    pub incr: f32,
    pub index: f32,
    pub sample_index: i32,
    pub value: f32,
}
#[test]
fn bindgen_test_layout_sp_fold() {
    assert_eq!(
        ::std::mem::size_of::<sp_fold>(),
        16usize,
        concat!("Size of: ", stringify!(sp_fold))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_fold>(),
        4usize,
        concat!("Alignment of ", stringify!(sp_fold))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_fold>())).incr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_fold),
            "::",
            stringify!(incr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_fold>())).index as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_fold),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_fold>())).sample_index as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_fold),
            "::",
            stringify!(sample_index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_fold>())).value as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_fold),
            "::",
            stringify!(value)
        )
    );
}
extern "C" {
    pub fn sp_fold_create(p: *mut *mut sp_fold) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_fold_destroy(p: *mut *mut sp_fold) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_fold_init(sp: *mut sp_data, p: *mut sp_fold) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_fold_compute(
        sp: *mut sp_data,
        p: *mut sp_fold,
        in_: *mut f32,
        out: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_bitcrush {
    pub bitdepth: f32,
    pub srate: f32,
    pub fold: *mut sp_fold,
}
#[test]
fn bindgen_test_layout_sp_bitcrush() {
    assert_eq!(
        ::std::mem::size_of::<sp_bitcrush>(),
        16usize,
        concat!("Size of: ", stringify!(sp_bitcrush))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_bitcrush>(),
        8usize,
        concat!("Alignment of ", stringify!(sp_bitcrush))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_bitcrush>())).bitdepth as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_bitcrush),
            "::",
            stringify!(bitdepth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_bitcrush>())).srate as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_bitcrush),
            "::",
            stringify!(srate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_bitcrush>())).fold as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_bitcrush),
            "::",
            stringify!(fold)
        )
    );
}
extern "C" {
    pub fn sp_bitcrush_create(p: *mut *mut sp_bitcrush) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_bitcrush_destroy(p: *mut *mut sp_bitcrush) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_bitcrush_init(sp: *mut sp_data, p: *mut sp_bitcrush) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_bitcrush_compute(
        sp: *mut sp_data,
        p: *mut sp_bitcrush,
        in_: *mut f32,
        out: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_brown {
    pub brown: f32,
}
#[test]
fn bindgen_test_layout_sp_brown() {
    assert_eq!(
        ::std::mem::size_of::<sp_brown>(),
        4usize,
        concat!("Size of: ", stringify!(sp_brown))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_brown>(),
        4usize,
        concat!("Alignment of ", stringify!(sp_brown))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_brown>())).brown as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_brown),
            "::",
            stringify!(brown)
        )
    );
}
extern "C" {
    pub fn sp_brown_create(p: *mut *mut sp_brown) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_brown_destroy(p: *mut *mut sp_brown) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_brown_init(sp: *mut sp_data, p: *mut sp_brown) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_brown_compute(
        sp: *mut sp_data,
        p: *mut sp_brown,
        in_: *mut f32,
        out: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_butbp {
    pub sr: f32,
    pub freq: f32,
    pub bw: f32,
    pub istor: f32,
    pub lkf: f32,
    pub lkb: f32,
    pub a: [f32; 8usize],
    pub pidsr: f32,
    pub tpidsr: f32,
}
#[test]
fn bindgen_test_layout_sp_butbp() {
    assert_eq!(
        ::std::mem::size_of::<sp_butbp>(),
        64usize,
        concat!("Size of: ", stringify!(sp_butbp))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_butbp>(),
        4usize,
        concat!("Alignment of ", stringify!(sp_butbp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_butbp>())).sr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_butbp),
            "::",
            stringify!(sr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_butbp>())).freq as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_butbp),
            "::",
            stringify!(freq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_butbp>())).bw as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_butbp),
            "::",
            stringify!(bw)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_butbp>())).istor as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_butbp),
            "::",
            stringify!(istor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_butbp>())).lkf as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_butbp),
            "::",
            stringify!(lkf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_butbp>())).lkb as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_butbp),
            "::",
            stringify!(lkb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_butbp>())).a as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_butbp),
            "::",
            stringify!(a)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_butbp>())).pidsr as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_butbp),
            "::",
            stringify!(pidsr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_butbp>())).tpidsr as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_butbp),
            "::",
            stringify!(tpidsr)
        )
    );
}
extern "C" {
    pub fn sp_butbp_create(p: *mut *mut sp_butbp) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_butbp_destroy(p: *mut *mut sp_butbp) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_butbp_init(sp: *mut sp_data, p: *mut sp_butbp) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_butbp_compute(
        sp: *mut sp_data,
        p: *mut sp_butbp,
        in_: *mut f32,
        out: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_butbr {
    pub sr: f32,
    pub freq: f32,
    pub bw: f32,
    pub istor: f32,
    pub lkf: f32,
    pub lkb: f32,
    pub a: [f32; 8usize],
    pub pidsr: f32,
    pub tpidsr: f32,
}
#[test]
fn bindgen_test_layout_sp_butbr() {
    assert_eq!(
        ::std::mem::size_of::<sp_butbr>(),
        64usize,
        concat!("Size of: ", stringify!(sp_butbr))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_butbr>(),
        4usize,
        concat!("Alignment of ", stringify!(sp_butbr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_butbr>())).sr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_butbr),
            "::",
            stringify!(sr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_butbr>())).freq as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_butbr),
            "::",
            stringify!(freq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_butbr>())).bw as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_butbr),
            "::",
            stringify!(bw)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_butbr>())).istor as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_butbr),
            "::",
            stringify!(istor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_butbr>())).lkf as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_butbr),
            "::",
            stringify!(lkf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_butbr>())).lkb as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_butbr),
            "::",
            stringify!(lkb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_butbr>())).a as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_butbr),
            "::",
            stringify!(a)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_butbr>())).pidsr as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_butbr),
            "::",
            stringify!(pidsr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_butbr>())).tpidsr as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_butbr),
            "::",
            stringify!(tpidsr)
        )
    );
}
extern "C" {
    pub fn sp_butbr_create(p: *mut *mut sp_butbr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_butbr_destroy(p: *mut *mut sp_butbr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_butbr_init(sp: *mut sp_data, p: *mut sp_butbr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_butbr_compute(
        sp: *mut sp_data,
        p: *mut sp_butbr,
        in_: *mut f32,
        out: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_buthp {
    pub sr: f32,
    pub freq: f32,
    pub istor: f32,
    pub lkf: f32,
    pub a: [f32; 8usize],
    pub pidsr: f32,
}
#[test]
fn bindgen_test_layout_sp_buthp() {
    assert_eq!(
        ::std::mem::size_of::<sp_buthp>(),
        52usize,
        concat!("Size of: ", stringify!(sp_buthp))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_buthp>(),
        4usize,
        concat!("Alignment of ", stringify!(sp_buthp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_buthp>())).sr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_buthp),
            "::",
            stringify!(sr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_buthp>())).freq as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_buthp),
            "::",
            stringify!(freq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_buthp>())).istor as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_buthp),
            "::",
            stringify!(istor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_buthp>())).lkf as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_buthp),
            "::",
            stringify!(lkf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_buthp>())).a as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_buthp),
            "::",
            stringify!(a)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_buthp>())).pidsr as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_buthp),
            "::",
            stringify!(pidsr)
        )
    );
}
extern "C" {
    pub fn sp_buthp_create(p: *mut *mut sp_buthp) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_buthp_destroy(p: *mut *mut sp_buthp) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_buthp_init(sp: *mut sp_data, p: *mut sp_buthp) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_buthp_compute(
        sp: *mut sp_data,
        p: *mut sp_buthp,
        in_: *mut f32,
        out: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_butlp {
    pub sr: f32,
    pub freq: f32,
    pub istor: f32,
    pub lkf: f32,
    pub a: [f32; 8usize],
    pub pidsr: f32,
}
#[test]
fn bindgen_test_layout_sp_butlp() {
    assert_eq!(
        ::std::mem::size_of::<sp_butlp>(),
        52usize,
        concat!("Size of: ", stringify!(sp_butlp))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_butlp>(),
        4usize,
        concat!("Alignment of ", stringify!(sp_butlp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_butlp>())).sr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_butlp),
            "::",
            stringify!(sr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_butlp>())).freq as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_butlp),
            "::",
            stringify!(freq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_butlp>())).istor as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_butlp),
            "::",
            stringify!(istor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_butlp>())).lkf as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_butlp),
            "::",
            stringify!(lkf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_butlp>())).a as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_butlp),
            "::",
            stringify!(a)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_butlp>())).pidsr as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_butlp),
            "::",
            stringify!(pidsr)
        )
    );
}
extern "C" {
    pub fn sp_butlp_create(p: *mut *mut sp_butlp) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_butlp_destroy(p: *mut *mut sp_butlp) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_butlp_init(sp: *mut sp_data, p: *mut sp_butlp) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_butlp_compute(
        sp: *mut sp_data,
        p: *mut sp_butlp,
        in_: *mut f32,
        out: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_clip {
    pub lim: f32,
    pub k1: f32,
}
#[test]
fn bindgen_test_layout_sp_clip() {
    assert_eq!(
        ::std::mem::size_of::<sp_clip>(),
        8usize,
        concat!("Size of: ", stringify!(sp_clip))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_clip>(),
        4usize,
        concat!("Alignment of ", stringify!(sp_clip))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_clip>())).lim as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_clip),
            "::",
            stringify!(lim)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_clip>())).k1 as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_clip),
            "::",
            stringify!(k1)
        )
    );
}
extern "C" {
    pub fn sp_clip_create(p: *mut *mut sp_clip) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_clip_destroy(p: *mut *mut sp_clip) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_clip_init(sp: *mut sp_data, p: *mut sp_clip) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_clip_compute(
        sp: *mut sp_data,
        p: *mut sp_clip,
        in_: *mut f32,
        out: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_clock {
    pub bpm: f32,
    pub subdiv: f32,
    pub counter: u32,
}
#[test]
fn bindgen_test_layout_sp_clock() {
    assert_eq!(
        ::std::mem::size_of::<sp_clock>(),
        12usize,
        concat!("Size of: ", stringify!(sp_clock))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_clock>(),
        4usize,
        concat!("Alignment of ", stringify!(sp_clock))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_clock>())).bpm as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_clock),
            "::",
            stringify!(bpm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_clock>())).subdiv as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_clock),
            "::",
            stringify!(subdiv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_clock>())).counter as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_clock),
            "::",
            stringify!(counter)
        )
    );
}
extern "C" {
    pub fn sp_clock_create(p: *mut *mut sp_clock) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_clock_destroy(p: *mut *mut sp_clock) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_clock_init(sp: *mut sp_data, p: *mut sp_clock) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_clock_compute(
        sp: *mut sp_data,
        p: *mut sp_clock,
        trig: *mut f32,
        out: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_comb {
    pub revtime: f32,
    pub looptime: f32,
    pub coef: f32,
    pub prvt: f32,
    pub aux: sp_auxdata,
    pub bufpos: u32,
    pub bufsize: u32,
}
#[test]
fn bindgen_test_layout_sp_comb() {
    assert_eq!(
        ::std::mem::size_of::<sp_comb>(),
        40usize,
        concat!("Size of: ", stringify!(sp_comb))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_comb>(),
        8usize,
        concat!("Alignment of ", stringify!(sp_comb))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_comb>())).revtime as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_comb),
            "::",
            stringify!(revtime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_comb>())).looptime as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_comb),
            "::",
            stringify!(looptime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_comb>())).coef as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_comb),
            "::",
            stringify!(coef)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_comb>())).prvt as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_comb),
            "::",
            stringify!(prvt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_comb>())).aux as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_comb),
            "::",
            stringify!(aux)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_comb>())).bufpos as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_comb),
            "::",
            stringify!(bufpos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_comb>())).bufsize as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_comb),
            "::",
            stringify!(bufsize)
        )
    );
}
extern "C" {
    pub fn sp_comb_create(p: *mut *mut sp_comb) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_comb_destroy(p: *mut *mut sp_comb) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_comb_init(sp: *mut sp_data, p: *mut sp_comb, looptime: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_comb_compute(
        sp: *mut sp_data,
        p: *mut sp_comb,
        in_: *mut f32,
        out: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_compressor {
    pub faust: *mut ::std::os::raw::c_void,
    pub argpos: ::std::os::raw::c_int,
    pub args: [*mut f32; 4usize],
    pub ratio: *mut f32,
    pub thresh: *mut f32,
    pub atk: *mut f32,
    pub rel: *mut f32,
}
#[test]
fn bindgen_test_layout_sp_compressor() {
    assert_eq!(
        ::std::mem::size_of::<sp_compressor>(),
        80usize,
        concat!("Size of: ", stringify!(sp_compressor))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_compressor>(),
        8usize,
        concat!("Alignment of ", stringify!(sp_compressor))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_compressor>())).faust as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_compressor),
            "::",
            stringify!(faust)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_compressor>())).argpos as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_compressor),
            "::",
            stringify!(argpos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_compressor>())).args as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_compressor),
            "::",
            stringify!(args)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_compressor>())).ratio as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_compressor),
            "::",
            stringify!(ratio)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_compressor>())).thresh as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_compressor),
            "::",
            stringify!(thresh)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_compressor>())).atk as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_compressor),
            "::",
            stringify!(atk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_compressor>())).rel as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_compressor),
            "::",
            stringify!(rel)
        )
    );
}
extern "C" {
    pub fn sp_compressor_create(p: *mut *mut sp_compressor) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_compressor_destroy(p: *mut *mut sp_compressor) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_compressor_init(sp: *mut sp_data, p: *mut sp_compressor) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_compressor_compute(
        sp: *mut sp_data,
        p: *mut sp_compressor,
        in_: *mut f32,
        out: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_count {
    pub count: i32,
    pub curcount: i32,
    pub mode: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sp_count() {
    assert_eq!(
        ::std::mem::size_of::<sp_count>(),
        12usize,
        concat!("Size of: ", stringify!(sp_count))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_count>(),
        4usize,
        concat!("Alignment of ", stringify!(sp_count))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_count>())).count as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_count),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_count>())).curcount as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_count),
            "::",
            stringify!(curcount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_count>())).mode as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_count),
            "::",
            stringify!(mode)
        )
    );
}
extern "C" {
    pub fn sp_count_create(p: *mut *mut sp_count) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_count_destroy(p: *mut *mut sp_count) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_count_init(sp: *mut sp_data, p: *mut sp_count) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_count_compute(
        sp: *mut sp_data,
        p: *mut sp_count,
        in_: *mut f32,
        out: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_conv {
    pub aOut: [f32; 1usize],
    pub aIn: f32,
    pub iPartLen: f32,
    pub iSkipSamples: f32,
    pub iTotLen: f32,
    pub initDone: ::std::os::raw::c_int,
    pub nChannels: ::std::os::raw::c_int,
    pub cnt: ::std::os::raw::c_int,
    pub nPartitions: ::std::os::raw::c_int,
    pub partSize: ::std::os::raw::c_int,
    pub rbCnt: ::std::os::raw::c_int,
    pub tmpBuf: *mut f32,
    pub ringBuf: *mut f32,
    pub IR_Data: [*mut f32; 1usize],
    pub outBuffers: [*mut f32; 1usize],
    pub auxData: sp_auxdata,
    pub ftbl: *mut sp_ftbl,
    pub fft: sp_fft,
}
#[test]
fn bindgen_test_layout_sp_conv() {
    assert_eq!(
        ::std::mem::size_of::<sp_conv>(),
        128usize,
        concat!("Size of: ", stringify!(sp_conv))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_conv>(),
        8usize,
        concat!("Alignment of ", stringify!(sp_conv))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_conv>())).aOut as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_conv),
            "::",
            stringify!(aOut)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_conv>())).aIn as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_conv),
            "::",
            stringify!(aIn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_conv>())).iPartLen as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_conv),
            "::",
            stringify!(iPartLen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_conv>())).iSkipSamples as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_conv),
            "::",
            stringify!(iSkipSamples)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_conv>())).iTotLen as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_conv),
            "::",
            stringify!(iTotLen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_conv>())).initDone as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_conv),
            "::",
            stringify!(initDone)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_conv>())).nChannels as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_conv),
            "::",
            stringify!(nChannels)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_conv>())).cnt as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_conv),
            "::",
            stringify!(cnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_conv>())).nPartitions as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_conv),
            "::",
            stringify!(nPartitions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_conv>())).partSize as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_conv),
            "::",
            stringify!(partSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_conv>())).rbCnt as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_conv),
            "::",
            stringify!(rbCnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_conv>())).tmpBuf as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_conv),
            "::",
            stringify!(tmpBuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_conv>())).ringBuf as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_conv),
            "::",
            stringify!(ringBuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_conv>())).IR_Data as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_conv),
            "::",
            stringify!(IR_Data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_conv>())).outBuffers as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_conv),
            "::",
            stringify!(outBuffers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_conv>())).auxData as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_conv),
            "::",
            stringify!(auxData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_conv>())).ftbl as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_conv),
            "::",
            stringify!(ftbl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_conv>())).fft as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_conv),
            "::",
            stringify!(fft)
        )
    );
}
extern "C" {
    pub fn sp_conv_create(p: *mut *mut sp_conv) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_conv_destroy(p: *mut *mut sp_conv) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_conv_init(
        sp: *mut sp_data,
        p: *mut sp_conv,
        ft: *mut sp_ftbl,
        iPartLen: f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_conv_compute(
        sp: *mut sp_data,
        p: *mut sp_conv,
        in_: *mut f32,
        out: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_crossfade {
    pub pos: f32,
}
#[test]
fn bindgen_test_layout_sp_crossfade() {
    assert_eq!(
        ::std::mem::size_of::<sp_crossfade>(),
        4usize,
        concat!("Size of: ", stringify!(sp_crossfade))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_crossfade>(),
        4usize,
        concat!("Alignment of ", stringify!(sp_crossfade))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_crossfade>())).pos as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_crossfade),
            "::",
            stringify!(pos)
        )
    );
}
extern "C" {
    pub fn sp_crossfade_create(p: *mut *mut sp_crossfade) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_crossfade_destroy(p: *mut *mut sp_crossfade) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_crossfade_init(sp: *mut sp_data, p: *mut sp_crossfade) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_crossfade_compute(
        sp: *mut sp_data,
        p: *mut sp_crossfade,
        in1: *mut f32,
        in2: *mut f32,
        out: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_dcblock {
    pub gg: f32,
    pub outputs: f32,
    pub inputs: f32,
    pub gain: f32,
}
#[test]
fn bindgen_test_layout_sp_dcblock() {
    assert_eq!(
        ::std::mem::size_of::<sp_dcblock>(),
        16usize,
        concat!("Size of: ", stringify!(sp_dcblock))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_dcblock>(),
        4usize,
        concat!("Alignment of ", stringify!(sp_dcblock))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_dcblock>())).gg as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_dcblock),
            "::",
            stringify!(gg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_dcblock>())).outputs as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_dcblock),
            "::",
            stringify!(outputs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_dcblock>())).inputs as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_dcblock),
            "::",
            stringify!(inputs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_dcblock>())).gain as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_dcblock),
            "::",
            stringify!(gain)
        )
    );
}
extern "C" {
    pub fn sp_dcblock_create(p: *mut *mut sp_dcblock) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_dcblock_destroy(p: *mut *mut sp_dcblock) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_dcblock_init(sp: *mut sp_data, p: *mut sp_dcblock) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_dcblock_compute(
        sp: *mut sp_data,
        p: *mut sp_dcblock,
        in_: *mut f32,
        out: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_delay {
    pub time: f32,
    pub feedback: f32,
    pub last: f32,
    pub buf: sp_auxdata,
    pub bufsize: u32,
    pub bufpos: u32,
}
#[test]
fn bindgen_test_layout_sp_delay() {
    assert_eq!(
        ::std::mem::size_of::<sp_delay>(),
        40usize,
        concat!("Size of: ", stringify!(sp_delay))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_delay>(),
        8usize,
        concat!("Alignment of ", stringify!(sp_delay))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_delay>())).time as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_delay),
            "::",
            stringify!(time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_delay>())).feedback as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_delay),
            "::",
            stringify!(feedback)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_delay>())).last as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_delay),
            "::",
            stringify!(last)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_delay>())).buf as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_delay),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_delay>())).bufsize as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_delay),
            "::",
            stringify!(bufsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_delay>())).bufpos as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_delay),
            "::",
            stringify!(bufpos)
        )
    );
}
extern "C" {
    pub fn sp_delay_create(p: *mut *mut sp_delay) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_delay_destroy(p: *mut *mut sp_delay) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_delay_init(sp: *mut sp_data, p: *mut sp_delay, time: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_delay_compute(
        sp: *mut sp_data,
        p: *mut sp_delay,
        in_: *mut f32,
        out: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_diode {
    pub opva_alpha: [f32; 4usize],
    pub opva_beta: [f32; 4usize],
    pub opva_gamma: [f32; 4usize],
    pub opva_delta: [f32; 4usize],
    pub opva_eps: [f32; 4usize],
    pub opva_a0: [f32; 4usize],
    pub opva_fdbk: [f32; 4usize],
    pub opva_z1: [f32; 4usize],
    pub SG: [f32; 4usize],
    pub gamma: f32,
    pub freq: f32,
    pub K: f32,
    pub res: f32,
}
#[test]
fn bindgen_test_layout_sp_diode() {
    assert_eq!(
        ::std::mem::size_of::<sp_diode>(),
        160usize,
        concat!("Size of: ", stringify!(sp_diode))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_diode>(),
        4usize,
        concat!("Alignment of ", stringify!(sp_diode))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_diode>())).opva_alpha as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_diode),
            "::",
            stringify!(opva_alpha)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_diode>())).opva_beta as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_diode),
            "::",
            stringify!(opva_beta)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_diode>())).opva_gamma as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_diode),
            "::",
            stringify!(opva_gamma)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_diode>())).opva_delta as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_diode),
            "::",
            stringify!(opva_delta)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_diode>())).opva_eps as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_diode),
            "::",
            stringify!(opva_eps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_diode>())).opva_a0 as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_diode),
            "::",
            stringify!(opva_a0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_diode>())).opva_fdbk as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_diode),
            "::",
            stringify!(opva_fdbk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_diode>())).opva_z1 as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_diode),
            "::",
            stringify!(opva_z1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_diode>())).SG as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_diode),
            "::",
            stringify!(SG)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_diode>())).gamma as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_diode),
            "::",
            stringify!(gamma)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_diode>())).freq as *const _ as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_diode),
            "::",
            stringify!(freq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_diode>())).K as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_diode),
            "::",
            stringify!(K)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_diode>())).res as *const _ as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_diode),
            "::",
            stringify!(res)
        )
    );
}
extern "C" {
    pub fn sp_diode_create(p: *mut *mut sp_diode) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_diode_destroy(p: *mut *mut sp_diode) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_diode_init(sp: *mut sp_data, p: *mut sp_diode) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_diode_compute(
        sp: *mut sp_data,
        p: *mut sp_diode,
        in_: *mut f32,
        out: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_dist {
    pub pregain: f32,
    pub postgain: f32,
    pub shape1: f32,
    pub shape2: f32,
    pub mode: f32,
}
#[test]
fn bindgen_test_layout_sp_dist() {
    assert_eq!(
        ::std::mem::size_of::<sp_dist>(),
        20usize,
        concat!("Size of: ", stringify!(sp_dist))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_dist>(),
        4usize,
        concat!("Alignment of ", stringify!(sp_dist))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_dist>())).pregain as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_dist),
            "::",
            stringify!(pregain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_dist>())).postgain as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_dist),
            "::",
            stringify!(postgain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_dist>())).shape1 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_dist),
            "::",
            stringify!(shape1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_dist>())).shape2 as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_dist),
            "::",
            stringify!(shape2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_dist>())).mode as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_dist),
            "::",
            stringify!(mode)
        )
    );
}
extern "C" {
    pub fn sp_dist_create(p: *mut *mut sp_dist) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_dist_destroy(p: *mut *mut sp_dist) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_dist_init(sp: *mut sp_data, p: *mut sp_dist) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_dist_compute(
        sp: *mut sp_data,
        p: *mut sp_dist,
        in_: *mut f32,
        out: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_dmetro {
    pub time: f32,
    pub counter: u32,
}
#[test]
fn bindgen_test_layout_sp_dmetro() {
    assert_eq!(
        ::std::mem::size_of::<sp_dmetro>(),
        8usize,
        concat!("Size of: ", stringify!(sp_dmetro))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_dmetro>(),
        4usize,
        concat!("Alignment of ", stringify!(sp_dmetro))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_dmetro>())).time as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_dmetro),
            "::",
            stringify!(time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_dmetro>())).counter as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_dmetro),
            "::",
            stringify!(counter)
        )
    );
}
extern "C" {
    pub fn sp_dmetro_create(p: *mut *mut sp_dmetro) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_dmetro_destroy(p: *mut *mut sp_dmetro) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_dmetro_init(sp: *mut sp_data, p: *mut sp_dmetro) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_dmetro_compute(
        sp: *mut sp_data,
        p: *mut sp_dmetro,
        in_: *mut f32,
        out: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_drip {
    pub amp: f32,
    pub dettack: f32,
    pub num_tubes: f32,
    pub damp: f32,
    pub shake_max: f32,
    pub freq: f32,
    pub freq1: f32,
    pub freq2: f32,
    pub num_objectsSave: f32,
    pub shake_maxSave: f32,
    pub shakeEnergy: f32,
    pub outputs00: f32,
    pub outputs01: f32,
    pub outputs10: f32,
    pub outputs11: f32,
    pub outputs20: f32,
    pub outputs21: f32,
    pub coeffs00: f32,
    pub coeffs01: f32,
    pub coeffs10: f32,
    pub coeffs11: f32,
    pub coeffs20: f32,
    pub coeffs21: f32,
    pub finalZ0: f32,
    pub finalZ1: f32,
    pub finalZ2: f32,
    pub sndLevel: f32,
    pub gains0: f32,
    pub gains1: f32,
    pub gains2: f32,
    pub center_freqs0: f32,
    pub center_freqs1: f32,
    pub center_freqs2: f32,
    pub soundDecay: f32,
    pub systemDecay: f32,
    pub num_objects: f32,
    pub totalEnergy: f32,
    pub decayScale: f32,
    pub res_freq0: f32,
    pub res_freq1: f32,
    pub res_freq2: f32,
    pub shake_damp: f32,
    pub kloop: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sp_drip() {
    assert_eq!(
        ::std::mem::size_of::<sp_drip>(),
        172usize,
        concat!("Size of: ", stringify!(sp_drip))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_drip>(),
        4usize,
        concat!("Alignment of ", stringify!(sp_drip))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_drip>())).amp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_drip),
            "::",
            stringify!(amp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_drip>())).dettack as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_drip),
            "::",
            stringify!(dettack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_drip>())).num_tubes as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_drip),
            "::",
            stringify!(num_tubes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_drip>())).damp as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_drip),
            "::",
            stringify!(damp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_drip>())).shake_max as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_drip),
            "::",
            stringify!(shake_max)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_drip>())).freq as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_drip),
            "::",
            stringify!(freq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_drip>())).freq1 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_drip),
            "::",
            stringify!(freq1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_drip>())).freq2 as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_drip),
            "::",
            stringify!(freq2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_drip>())).num_objectsSave as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_drip),
            "::",
            stringify!(num_objectsSave)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_drip>())).shake_maxSave as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_drip),
            "::",
            stringify!(shake_maxSave)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_drip>())).shakeEnergy as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_drip),
            "::",
            stringify!(shakeEnergy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_drip>())).outputs00 as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_drip),
            "::",
            stringify!(outputs00)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_drip>())).outputs01 as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_drip),
            "::",
            stringify!(outputs01)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_drip>())).outputs10 as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_drip),
            "::",
            stringify!(outputs10)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_drip>())).outputs11 as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_drip),
            "::",
            stringify!(outputs11)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_drip>())).outputs20 as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_drip),
            "::",
            stringify!(outputs20)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_drip>())).outputs21 as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_drip),
            "::",
            stringify!(outputs21)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_drip>())).coeffs00 as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_drip),
            "::",
            stringify!(coeffs00)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_drip>())).coeffs01 as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_drip),
            "::",
            stringify!(coeffs01)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_drip>())).coeffs10 as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_drip),
            "::",
            stringify!(coeffs10)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_drip>())).coeffs11 as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_drip),
            "::",
            stringify!(coeffs11)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_drip>())).coeffs20 as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_drip),
            "::",
            stringify!(coeffs20)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_drip>())).coeffs21 as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_drip),
            "::",
            stringify!(coeffs21)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_drip>())).finalZ0 as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_drip),
            "::",
            stringify!(finalZ0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_drip>())).finalZ1 as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_drip),
            "::",
            stringify!(finalZ1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_drip>())).finalZ2 as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_drip),
            "::",
            stringify!(finalZ2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_drip>())).sndLevel as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_drip),
            "::",
            stringify!(sndLevel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_drip>())).gains0 as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_drip),
            "::",
            stringify!(gains0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_drip>())).gains1 as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_drip),
            "::",
            stringify!(gains1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_drip>())).gains2 as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_drip),
            "::",
            stringify!(gains2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_drip>())).center_freqs0 as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_drip),
            "::",
            stringify!(center_freqs0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_drip>())).center_freqs1 as *const _ as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_drip),
            "::",
            stringify!(center_freqs1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_drip>())).center_freqs2 as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_drip),
            "::",
            stringify!(center_freqs2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_drip>())).soundDecay as *const _ as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_drip),
            "::",
            stringify!(soundDecay)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_drip>())).systemDecay as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_drip),
            "::",
            stringify!(systemDecay)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_drip>())).num_objects as *const _ as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_drip),
            "::",
            stringify!(num_objects)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_drip>())).totalEnergy as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_drip),
            "::",
            stringify!(totalEnergy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_drip>())).decayScale as *const _ as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_drip),
            "::",
            stringify!(decayScale)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_drip>())).res_freq0 as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_drip),
            "::",
            stringify!(res_freq0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_drip>())).res_freq1 as *const _ as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_drip),
            "::",
            stringify!(res_freq1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_drip>())).res_freq2 as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_drip),
            "::",
            stringify!(res_freq2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_drip>())).shake_damp as *const _ as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_drip),
            "::",
            stringify!(shake_damp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_drip>())).kloop as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_drip),
            "::",
            stringify!(kloop)
        )
    );
}
extern "C" {
    pub fn sp_drip_create(p: *mut *mut sp_drip) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_drip_destroy(p: *mut *mut sp_drip) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_drip_init(sp: *mut sp_data, p: *mut sp_drip, dettack: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_drip_compute(
        sp: *mut sp_data,
        p: *mut sp_drip,
        trig: *mut f32,
        out: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_dtrig {
    pub ft: *mut sp_ftbl,
    pub counter: u32,
    pub pos: u32,
    pub running: ::std::os::raw::c_int,
    pub loop_: ::std::os::raw::c_int,
    pub delay: f32,
    pub scale: f32,
}
#[test]
fn bindgen_test_layout_sp_dtrig() {
    assert_eq!(
        ::std::mem::size_of::<sp_dtrig>(),
        32usize,
        concat!("Size of: ", stringify!(sp_dtrig))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_dtrig>(),
        8usize,
        concat!("Alignment of ", stringify!(sp_dtrig))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_dtrig>())).ft as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_dtrig),
            "::",
            stringify!(ft)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_dtrig>())).counter as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_dtrig),
            "::",
            stringify!(counter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_dtrig>())).pos as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_dtrig),
            "::",
            stringify!(pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_dtrig>())).running as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_dtrig),
            "::",
            stringify!(running)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_dtrig>())).loop_ as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_dtrig),
            "::",
            stringify!(loop_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_dtrig>())).delay as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_dtrig),
            "::",
            stringify!(delay)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_dtrig>())).scale as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_dtrig),
            "::",
            stringify!(scale)
        )
    );
}
extern "C" {
    pub fn sp_dtrig_create(p: *mut *mut sp_dtrig) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_dtrig_destroy(p: *mut *mut sp_dtrig) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_dtrig_init(
        sp: *mut sp_data,
        p: *mut sp_dtrig,
        ft: *mut sp_ftbl,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_dtrig_compute(
        sp: *mut sp_data,
        p: *mut sp_dtrig,
        in_: *mut f32,
        out: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_dust {
    pub amp: f32,
    pub density: f32,
    pub density0: f32,
    pub thresh: f32,
    pub scale: f32,
    pub onedsr: f32,
    pub bipolar: ::std::os::raw::c_int,
    pub rand: u32,
}
#[test]
fn bindgen_test_layout_sp_dust() {
    assert_eq!(
        ::std::mem::size_of::<sp_dust>(),
        32usize,
        concat!("Size of: ", stringify!(sp_dust))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_dust>(),
        4usize,
        concat!("Alignment of ", stringify!(sp_dust))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_dust>())).amp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_dust),
            "::",
            stringify!(amp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_dust>())).density as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_dust),
            "::",
            stringify!(density)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_dust>())).density0 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_dust),
            "::",
            stringify!(density0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_dust>())).thresh as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_dust),
            "::",
            stringify!(thresh)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_dust>())).scale as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_dust),
            "::",
            stringify!(scale)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_dust>())).onedsr as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_dust),
            "::",
            stringify!(onedsr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_dust>())).bipolar as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_dust),
            "::",
            stringify!(bipolar)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_dust>())).rand as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_dust),
            "::",
            stringify!(rand)
        )
    );
}
extern "C" {
    pub fn sp_dust_create(p: *mut *mut sp_dust) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_dust_destroy(p: *mut *mut sp_dust) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_dust_init(sp: *mut sp_data, p: *mut sp_dust) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_dust_compute(
        sp: *mut sp_data,
        p: *mut sp_dust,
        in_: *mut f32,
        out: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_eqfil {
    pub freq: f32,
    pub bw: f32,
    pub gain: f32,
    pub z1: f32,
    pub z2: f32,
    pub sr: f32,
    pub frv: f32,
    pub bwv: f32,
    pub c: f32,
    pub d: f32,
}
#[test]
fn bindgen_test_layout_sp_eqfil() {
    assert_eq!(
        ::std::mem::size_of::<sp_eqfil>(),
        40usize,
        concat!("Size of: ", stringify!(sp_eqfil))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_eqfil>(),
        4usize,
        concat!("Alignment of ", stringify!(sp_eqfil))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_eqfil>())).freq as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_eqfil),
            "::",
            stringify!(freq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_eqfil>())).bw as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_eqfil),
            "::",
            stringify!(bw)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_eqfil>())).gain as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_eqfil),
            "::",
            stringify!(gain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_eqfil>())).z1 as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_eqfil),
            "::",
            stringify!(z1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_eqfil>())).z2 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_eqfil),
            "::",
            stringify!(z2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_eqfil>())).sr as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_eqfil),
            "::",
            stringify!(sr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_eqfil>())).frv as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_eqfil),
            "::",
            stringify!(frv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_eqfil>())).bwv as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_eqfil),
            "::",
            stringify!(bwv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_eqfil>())).c as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_eqfil),
            "::",
            stringify!(c)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_eqfil>())).d as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_eqfil),
            "::",
            stringify!(d)
        )
    );
}
extern "C" {
    pub fn sp_eqfil_create(p: *mut *mut sp_eqfil) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_eqfil_destroy(p: *mut *mut sp_eqfil) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_eqfil_init(sp: *mut sp_data, p: *mut sp_eqfil) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_eqfil_compute(
        sp: *mut sp_data,
        p: *mut sp_eqfil,
        in_: *mut f32,
        out: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_expon {
    pub a: f32,
    pub dur: f32,
    pub b: f32,
    pub val: f32,
    pub incr: f32,
    pub sdur: u32,
    pub stime: u32,
    pub init: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sp_expon() {
    assert_eq!(
        ::std::mem::size_of::<sp_expon>(),
        32usize,
        concat!("Size of: ", stringify!(sp_expon))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_expon>(),
        4usize,
        concat!("Alignment of ", stringify!(sp_expon))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_expon>())).a as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_expon),
            "::",
            stringify!(a)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_expon>())).dur as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_expon),
            "::",
            stringify!(dur)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_expon>())).b as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_expon),
            "::",
            stringify!(b)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_expon>())).val as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_expon),
            "::",
            stringify!(val)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_expon>())).incr as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_expon),
            "::",
            stringify!(incr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_expon>())).sdur as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_expon),
            "::",
            stringify!(sdur)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_expon>())).stime as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_expon),
            "::",
            stringify!(stime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_expon>())).init as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_expon),
            "::",
            stringify!(init)
        )
    );
}
extern "C" {
    pub fn sp_expon_create(p: *mut *mut sp_expon) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_expon_destroy(p: *mut *mut sp_expon) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_expon_init(sp: *mut sp_data, p: *mut sp_expon) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_expon_compute(
        sp: *mut sp_data,
        p: *mut sp_expon,
        in_: *mut f32,
        out: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_fof_overlap {
    pub nxtact: *mut sp_fof_overlap,
    pub nxtfree: *mut sp_fof_overlap,
    pub timrem: i32,
    pub dectim: i32,
    pub formphs: i32,
    pub forminc: i32,
    pub risphs: i32,
    pub risinc: i32,
    pub decphs: i32,
    pub decinc: i32,
    pub curamp: f32,
    pub expamp: f32,
    pub glissbas: f32,
    pub sampct: i32,
}
#[test]
fn bindgen_test_layout_sp_fof_overlap() {
    assert_eq!(
        ::std::mem::size_of::<sp_fof_overlap>(),
        64usize,
        concat!("Size of: ", stringify!(sp_fof_overlap))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_fof_overlap>(),
        8usize,
        concat!("Alignment of ", stringify!(sp_fof_overlap))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_fof_overlap>())).nxtact as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_fof_overlap),
            "::",
            stringify!(nxtact)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_fof_overlap>())).nxtfree as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_fof_overlap),
            "::",
            stringify!(nxtfree)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_fof_overlap>())).timrem as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_fof_overlap),
            "::",
            stringify!(timrem)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_fof_overlap>())).dectim as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_fof_overlap),
            "::",
            stringify!(dectim)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_fof_overlap>())).formphs as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_fof_overlap),
            "::",
            stringify!(formphs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_fof_overlap>())).forminc as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_fof_overlap),
            "::",
            stringify!(forminc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_fof_overlap>())).risphs as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_fof_overlap),
            "::",
            stringify!(risphs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_fof_overlap>())).risinc as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_fof_overlap),
            "::",
            stringify!(risinc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_fof_overlap>())).decphs as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_fof_overlap),
            "::",
            stringify!(decphs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_fof_overlap>())).decinc as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_fof_overlap),
            "::",
            stringify!(decinc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_fof_overlap>())).curamp as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_fof_overlap),
            "::",
            stringify!(curamp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_fof_overlap>())).expamp as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_fof_overlap),
            "::",
            stringify!(expamp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_fof_overlap>())).glissbas as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_fof_overlap),
            "::",
            stringify!(glissbas)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_fof_overlap>())).sampct as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_fof_overlap),
            "::",
            stringify!(sampct)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_fof {
    pub amp: f32,
    pub fund: f32,
    pub form: f32,
    pub oct: f32,
    pub band: f32,
    pub ris: f32,
    pub dur: f32,
    pub dec: f32,
    pub iolaps: f32,
    pub iphs: f32,
    pub durtogo: i32,
    pub fundphs: i32,
    pub fofcount: i32,
    pub prvsmps: i32,
    pub prvband: f32,
    pub expamp: f32,
    pub preamp: f32,
    pub foftype: i16,
    pub xincod: i16,
    pub ampcod: i16,
    pub fundcod: i16,
    pub formcod: i16,
    pub fmtmod: i16,
    pub auxch: sp_auxdata,
    pub ftp1: *mut sp_ftbl,
    pub ftp2: *mut sp_ftbl,
    pub basovrlap: sp_fof_overlap,
}
#[test]
fn bindgen_test_layout_sp_fof() {
    assert_eq!(
        ::std::mem::size_of::<sp_fof>(),
        176usize,
        concat!("Size of: ", stringify!(sp_fof))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_fof>(),
        8usize,
        concat!("Alignment of ", stringify!(sp_fof))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_fof>())).amp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_fof),
            "::",
            stringify!(amp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_fof>())).fund as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_fof),
            "::",
            stringify!(fund)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_fof>())).form as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_fof),
            "::",
            stringify!(form)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_fof>())).oct as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_fof),
            "::",
            stringify!(oct)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_fof>())).band as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_fof),
            "::",
            stringify!(band)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_fof>())).ris as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_fof),
            "::",
            stringify!(ris)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_fof>())).dur as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_fof),
            "::",
            stringify!(dur)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_fof>())).dec as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_fof),
            "::",
            stringify!(dec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_fof>())).iolaps as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_fof),
            "::",
            stringify!(iolaps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_fof>())).iphs as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_fof),
            "::",
            stringify!(iphs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_fof>())).durtogo as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_fof),
            "::",
            stringify!(durtogo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_fof>())).fundphs as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_fof),
            "::",
            stringify!(fundphs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_fof>())).fofcount as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_fof),
            "::",
            stringify!(fofcount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_fof>())).prvsmps as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_fof),
            "::",
            stringify!(prvsmps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_fof>())).prvband as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_fof),
            "::",
            stringify!(prvband)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_fof>())).expamp as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_fof),
            "::",
            stringify!(expamp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_fof>())).preamp as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_fof),
            "::",
            stringify!(preamp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_fof>())).foftype as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_fof),
            "::",
            stringify!(foftype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_fof>())).xincod as *const _ as usize },
        70usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_fof),
            "::",
            stringify!(xincod)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_fof>())).ampcod as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_fof),
            "::",
            stringify!(ampcod)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_fof>())).fundcod as *const _ as usize },
        74usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_fof),
            "::",
            stringify!(fundcod)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_fof>())).formcod as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_fof),
            "::",
            stringify!(formcod)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_fof>())).fmtmod as *const _ as usize },
        78usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_fof),
            "::",
            stringify!(fmtmod)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_fof>())).auxch as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_fof),
            "::",
            stringify!(auxch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_fof>())).ftp1 as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_fof),
            "::",
            stringify!(ftp1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_fof>())).ftp2 as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_fof),
            "::",
            stringify!(ftp2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_fof>())).basovrlap as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_fof),
            "::",
            stringify!(basovrlap)
        )
    );
}
extern "C" {
    pub fn sp_fof_create(p: *mut *mut sp_fof) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_fof_destroy(p: *mut *mut sp_fof) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_fof_init(
        sp: *mut sp_data,
        p: *mut sp_fof,
        sine: *mut sp_ftbl,
        win: *mut sp_ftbl,
        iolaps: ::std::os::raw::c_int,
        iphs: f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_fof_compute(
        sp: *mut sp_data,
        p: *mut sp_fof,
        in_: *mut f32,
        out: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_fog_overlap {
    pub nxtact: *mut sp_fog_overlap,
    pub nxtfree: *mut sp_fog_overlap,
    pub timrem: i32,
    pub dectim: i32,
    pub formphs: i32,
    pub forminc: i32,
    pub risphs: u32,
    pub risinc: i32,
    pub decphs: i32,
    pub decinc: i32,
    pub curamp: f32,
    pub expamp: f32,
    pub pos: f32,
    pub inc: f32,
}
#[test]
fn bindgen_test_layout_sp_fog_overlap() {
    assert_eq!(
        ::std::mem::size_of::<sp_fog_overlap>(),
        64usize,
        concat!("Size of: ", stringify!(sp_fog_overlap))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_fog_overlap>(),
        8usize,
        concat!("Alignment of ", stringify!(sp_fog_overlap))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_fog_overlap>())).nxtact as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_fog_overlap),
            "::",
            stringify!(nxtact)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_fog_overlap>())).nxtfree as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_fog_overlap),
            "::",
            stringify!(nxtfree)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_fog_overlap>())).timrem as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_fog_overlap),
            "::",
            stringify!(timrem)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_fog_overlap>())).dectim as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_fog_overlap),
            "::",
            stringify!(dectim)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_fog_overlap>())).formphs as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_fog_overlap),
            "::",
            stringify!(formphs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_fog_overlap>())).forminc as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_fog_overlap),
            "::",
            stringify!(forminc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_fog_overlap>())).risphs as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_fog_overlap),
            "::",
            stringify!(risphs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_fog_overlap>())).risinc as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_fog_overlap),
            "::",
            stringify!(risinc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_fog_overlap>())).decphs as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_fog_overlap),
            "::",
            stringify!(decphs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_fog_overlap>())).decinc as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_fog_overlap),
            "::",
            stringify!(decinc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_fog_overlap>())).curamp as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_fog_overlap),
            "::",
            stringify!(curamp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_fog_overlap>())).expamp as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_fog_overlap),
            "::",
            stringify!(expamp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_fog_overlap>())).pos as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_fog_overlap),
            "::",
            stringify!(pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_fog_overlap>())).inc as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_fog_overlap),
            "::",
            stringify!(inc)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_fog {
    pub amp: f32,
    pub dens: f32,
    pub trans: f32,
    pub spd: f32,
    pub oct: f32,
    pub band: f32,
    pub ris: f32,
    pub dur: f32,
    pub dec: f32,
    pub iolaps: f32,
    pub iphs: f32,
    pub itmode: f32,
    pub basovrlap: sp_fog_overlap,
    pub durtogo: i32,
    pub fundphs: i32,
    pub fofcount: i32,
    pub prvsmps: i32,
    pub spdphs: i32,
    pub prvband: f32,
    pub expamp: f32,
    pub preamp: f32,
    pub fogcvt: f32,
    pub formcod: i16,
    pub fmtmod: i16,
    pub speedcod: i16,
    pub auxch: sp_auxdata,
    pub ftp1: *mut sp_ftbl,
    pub ftp2: *mut sp_ftbl,
}
#[test]
fn bindgen_test_layout_sp_fog() {
    assert_eq!(
        ::std::mem::size_of::<sp_fog>(),
        192usize,
        concat!("Size of: ", stringify!(sp_fog))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_fog>(),
        8usize,
        concat!("Alignment of ", stringify!(sp_fog))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_fog>())).amp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_fog),
            "::",
            stringify!(amp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_fog>())).dens as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_fog),
            "::",
            stringify!(dens)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_fog>())).trans as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_fog),
            "::",
            stringify!(trans)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_fog>())).spd as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_fog),
            "::",
            stringify!(spd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_fog>())).oct as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_fog),
            "::",
            stringify!(oct)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_fog>())).band as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_fog),
            "::",
            stringify!(band)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_fog>())).ris as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_fog),
            "::",
            stringify!(ris)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_fog>())).dur as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_fog),
            "::",
            stringify!(dur)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_fog>())).dec as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_fog),
            "::",
            stringify!(dec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_fog>())).iolaps as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_fog),
            "::",
            stringify!(iolaps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_fog>())).iphs as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_fog),
            "::",
            stringify!(iphs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_fog>())).itmode as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_fog),
            "::",
            stringify!(itmode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_fog>())).basovrlap as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_fog),
            "::",
            stringify!(basovrlap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_fog>())).durtogo as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_fog),
            "::",
            stringify!(durtogo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_fog>())).fundphs as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_fog),
            "::",
            stringify!(fundphs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_fog>())).fofcount as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_fog),
            "::",
            stringify!(fofcount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_fog>())).prvsmps as *const _ as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_fog),
            "::",
            stringify!(prvsmps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_fog>())).spdphs as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_fog),
            "::",
            stringify!(spdphs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_fog>())).prvband as *const _ as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_fog),
            "::",
            stringify!(prvband)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_fog>())).expamp as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_fog),
            "::",
            stringify!(expamp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_fog>())).preamp as *const _ as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_fog),
            "::",
            stringify!(preamp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_fog>())).fogcvt as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_fog),
            "::",
            stringify!(fogcvt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_fog>())).formcod as *const _ as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_fog),
            "::",
            stringify!(formcod)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_fog>())).fmtmod as *const _ as usize },
        150usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_fog),
            "::",
            stringify!(fmtmod)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_fog>())).speedcod as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_fog),
            "::",
            stringify!(speedcod)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_fog>())).auxch as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_fog),
            "::",
            stringify!(auxch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_fog>())).ftp1 as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_fog),
            "::",
            stringify!(ftp1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_fog>())).ftp2 as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_fog),
            "::",
            stringify!(ftp2)
        )
    );
}
extern "C" {
    pub fn sp_fog_create(p: *mut *mut sp_fog) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_fog_destroy(p: *mut *mut sp_fog) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_fog_init(
        sp: *mut sp_data,
        p: *mut sp_fog,
        wav: *mut sp_ftbl,
        win: *mut sp_ftbl,
        iolaps: ::std::os::raw::c_int,
        iphs: f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_fog_compute(
        sp: *mut sp_data,
        p: *mut sp_fog,
        in_: *mut f32,
        out: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_fofilt {
    pub freq: f32,
    pub atk: f32,
    pub dec: f32,
    pub istor: f32,
    pub tpidsr: f32,
    pub sr: f32,
    pub delay: [f32; 4usize],
}
#[test]
fn bindgen_test_layout_sp_fofilt() {
    assert_eq!(
        ::std::mem::size_of::<sp_fofilt>(),
        40usize,
        concat!("Size of: ", stringify!(sp_fofilt))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_fofilt>(),
        4usize,
        concat!("Alignment of ", stringify!(sp_fofilt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_fofilt>())).freq as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_fofilt),
            "::",
            stringify!(freq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_fofilt>())).atk as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_fofilt),
            "::",
            stringify!(atk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_fofilt>())).dec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_fofilt),
            "::",
            stringify!(dec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_fofilt>())).istor as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_fofilt),
            "::",
            stringify!(istor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_fofilt>())).tpidsr as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_fofilt),
            "::",
            stringify!(tpidsr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_fofilt>())).sr as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_fofilt),
            "::",
            stringify!(sr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_fofilt>())).delay as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_fofilt),
            "::",
            stringify!(delay)
        )
    );
}
extern "C" {
    pub fn sp_fofilt_create(t: *mut *mut sp_fofilt) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_fofilt_destroy(t: *mut *mut sp_fofilt) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_fofilt_init(sp: *mut sp_data, p: *mut sp_fofilt) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_fofilt_compute(
        sp: *mut sp_data,
        p: *mut sp_fofilt,
        in_: *mut f32,
        out: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_foo {
    pub bar: f32,
}
#[test]
fn bindgen_test_layout_sp_foo() {
    assert_eq!(
        ::std::mem::size_of::<sp_foo>(),
        4usize,
        concat!("Size of: ", stringify!(sp_foo))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_foo>(),
        4usize,
        concat!("Alignment of ", stringify!(sp_foo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_foo>())).bar as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_foo),
            "::",
            stringify!(bar)
        )
    );
}
extern "C" {
    pub fn sp_foo_create(p: *mut *mut sp_foo) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_foo_destroy(p: *mut *mut sp_foo) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_foo_init(sp: *mut sp_data, p: *mut sp_foo) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_foo_compute(
        sp: *mut sp_data,
        p: *mut sp_foo,
        in_: *mut f32,
        out: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_fosc {
    pub amp: f32,
    pub freq: f32,
    pub car: f32,
    pub mod_: f32,
    pub indx: f32,
    pub iphs: f32,
    pub mphs: i32,
    pub cphs: i32,
    pub ft: *mut sp_ftbl,
}
#[test]
fn bindgen_test_layout_sp_fosc() {
    assert_eq!(
        ::std::mem::size_of::<sp_fosc>(),
        40usize,
        concat!("Size of: ", stringify!(sp_fosc))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_fosc>(),
        8usize,
        concat!("Alignment of ", stringify!(sp_fosc))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_fosc>())).amp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_fosc),
            "::",
            stringify!(amp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_fosc>())).freq as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_fosc),
            "::",
            stringify!(freq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_fosc>())).car as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_fosc),
            "::",
            stringify!(car)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_fosc>())).mod_ as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_fosc),
            "::",
            stringify!(mod_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_fosc>())).indx as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_fosc),
            "::",
            stringify!(indx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_fosc>())).iphs as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_fosc),
            "::",
            stringify!(iphs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_fosc>())).mphs as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_fosc),
            "::",
            stringify!(mphs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_fosc>())).cphs as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_fosc),
            "::",
            stringify!(cphs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_fosc>())).ft as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_fosc),
            "::",
            stringify!(ft)
        )
    );
}
extern "C" {
    pub fn sp_fosc_create(p: *mut *mut sp_fosc) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_fosc_destroy(p: *mut *mut sp_fosc) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_fosc_init(
        sp: *mut sp_data,
        p: *mut sp_fosc,
        ft: *mut sp_ftbl,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_fosc_compute(
        sp: *mut sp_data,
        p: *mut sp_fosc,
        in_: *mut f32,
        out: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_gbuzz {
    pub amp: f32,
    pub freq: f32,
    pub nharm: f32,
    pub lharm: f32,
    pub mul: f32,
    pub iphs: f32,
    pub ampcod: i16,
    pub cpscod: i16,
    pub prvn: i16,
    pub prvr: f32,
    pub twor: f32,
    pub rsqp1: f32,
    pub rtn: f32,
    pub rtnp1: f32,
    pub rsumr: f32,
    pub lphs: i32,
    pub reported: ::std::os::raw::c_int,
    pub last: f32,
    pub ft: *mut sp_ftbl,
}
#[test]
fn bindgen_test_layout_sp_gbuzz() {
    assert_eq!(
        ::std::mem::size_of::<sp_gbuzz>(),
        80usize,
        concat!("Size of: ", stringify!(sp_gbuzz))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_gbuzz>(),
        8usize,
        concat!("Alignment of ", stringify!(sp_gbuzz))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_gbuzz>())).amp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_gbuzz),
            "::",
            stringify!(amp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_gbuzz>())).freq as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_gbuzz),
            "::",
            stringify!(freq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_gbuzz>())).nharm as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_gbuzz),
            "::",
            stringify!(nharm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_gbuzz>())).lharm as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_gbuzz),
            "::",
            stringify!(lharm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_gbuzz>())).mul as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_gbuzz),
            "::",
            stringify!(mul)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_gbuzz>())).iphs as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_gbuzz),
            "::",
            stringify!(iphs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_gbuzz>())).ampcod as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_gbuzz),
            "::",
            stringify!(ampcod)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_gbuzz>())).cpscod as *const _ as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_gbuzz),
            "::",
            stringify!(cpscod)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_gbuzz>())).prvn as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_gbuzz),
            "::",
            stringify!(prvn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_gbuzz>())).prvr as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_gbuzz),
            "::",
            stringify!(prvr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_gbuzz>())).twor as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_gbuzz),
            "::",
            stringify!(twor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_gbuzz>())).rsqp1 as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_gbuzz),
            "::",
            stringify!(rsqp1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_gbuzz>())).rtn as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_gbuzz),
            "::",
            stringify!(rtn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_gbuzz>())).rtnp1 as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_gbuzz),
            "::",
            stringify!(rtnp1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_gbuzz>())).rsumr as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_gbuzz),
            "::",
            stringify!(rsumr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_gbuzz>())).lphs as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_gbuzz),
            "::",
            stringify!(lphs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_gbuzz>())).reported as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_gbuzz),
            "::",
            stringify!(reported)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_gbuzz>())).last as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_gbuzz),
            "::",
            stringify!(last)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_gbuzz>())).ft as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_gbuzz),
            "::",
            stringify!(ft)
        )
    );
}
extern "C" {
    pub fn sp_gbuzz_create(p: *mut *mut sp_gbuzz) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_gbuzz_destroy(p: *mut *mut sp_gbuzz) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_gbuzz_init(
        sp: *mut sp_data,
        p: *mut sp_gbuzz,
        ft: *mut sp_ftbl,
        iphs: f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_gbuzz_compute(
        sp: *mut sp_data,
        p: *mut sp_gbuzz,
        in_: *mut f32,
        out: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_hilbert {
    pub xnm1: [f32; 12usize],
    pub ynm1: [f32; 12usize],
    pub coef: [f32; 12usize],
}
#[test]
fn bindgen_test_layout_sp_hilbert() {
    assert_eq!(
        ::std::mem::size_of::<sp_hilbert>(),
        144usize,
        concat!("Size of: ", stringify!(sp_hilbert))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_hilbert>(),
        4usize,
        concat!("Alignment of ", stringify!(sp_hilbert))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_hilbert>())).xnm1 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_hilbert),
            "::",
            stringify!(xnm1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_hilbert>())).ynm1 as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_hilbert),
            "::",
            stringify!(ynm1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_hilbert>())).coef as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_hilbert),
            "::",
            stringify!(coef)
        )
    );
}
extern "C" {
    pub fn sp_hilbert_create(p: *mut *mut sp_hilbert) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_hilbert_destroy(p: *mut *mut sp_hilbert) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_hilbert_init(sp: *mut sp_data, p: *mut sp_hilbert) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_hilbert_compute(
        sp: *mut sp_data,
        p: *mut sp_hilbert,
        in_: *mut f32,
        out1: *mut f32,
        out2: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_in {
    pub fp: *mut FILE,
}
#[test]
fn bindgen_test_layout_sp_in() {
    assert_eq!(
        ::std::mem::size_of::<sp_in>(),
        8usize,
        concat!("Size of: ", stringify!(sp_in))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_in>(),
        8usize,
        concat!("Alignment of ", stringify!(sp_in))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_in>())).fp as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(sp_in), "::", stringify!(fp))
    );
}
extern "C" {
    pub fn sp_in_create(p: *mut *mut sp_in) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_in_destroy(p: *mut *mut sp_in) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_in_init(sp: *mut sp_data, p: *mut sp_in) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_in_compute(
        sp: *mut sp_data,
        p: *mut sp_in,
        in_: *mut f32,
        out: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_incr {
    pub step: f32,
    pub min: f32,
    pub max: f32,
    pub val: f32,
}
#[test]
fn bindgen_test_layout_sp_incr() {
    assert_eq!(
        ::std::mem::size_of::<sp_incr>(),
        16usize,
        concat!("Size of: ", stringify!(sp_incr))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_incr>(),
        4usize,
        concat!("Alignment of ", stringify!(sp_incr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_incr>())).step as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_incr),
            "::",
            stringify!(step)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_incr>())).min as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_incr),
            "::",
            stringify!(min)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_incr>())).max as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_incr),
            "::",
            stringify!(max)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_incr>())).val as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_incr),
            "::",
            stringify!(val)
        )
    );
}
extern "C" {
    pub fn sp_incr_create(p: *mut *mut sp_incr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_incr_destroy(p: *mut *mut sp_incr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_incr_init(sp: *mut sp_data, p: *mut sp_incr, val: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_incr_compute(
        sp: *mut sp_data,
        p: *mut sp_incr,
        in_: *mut f32,
        out: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_jcrev {
    pub ud: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_sp_jcrev() {
    assert_eq!(
        ::std::mem::size_of::<sp_jcrev>(),
        8usize,
        concat!("Size of: ", stringify!(sp_jcrev))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_jcrev>(),
        8usize,
        concat!("Alignment of ", stringify!(sp_jcrev))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_jcrev>())).ud as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_jcrev),
            "::",
            stringify!(ud)
        )
    );
}
extern "C" {
    pub fn sp_jcrev_create(p: *mut *mut sp_jcrev) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_jcrev_destroy(p: *mut *mut sp_jcrev) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_jcrev_init(sp: *mut sp_data, p: *mut sp_jcrev) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_jcrev_compute(
        sp: *mut sp_data,
        p: *mut sp_jcrev,
        in_: *mut f32,
        out: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_jitter {
    pub amp: f32,
    pub cpsMin: f32,
    pub cpsMax: f32,
    pub cps: f32,
    pub phs: i32,
    pub initflag: ::std::os::raw::c_int,
    pub num1: f32,
    pub num2: f32,
    pub dfdmax: f32,
}
#[test]
fn bindgen_test_layout_sp_jitter() {
    assert_eq!(
        ::std::mem::size_of::<sp_jitter>(),
        36usize,
        concat!("Size of: ", stringify!(sp_jitter))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_jitter>(),
        4usize,
        concat!("Alignment of ", stringify!(sp_jitter))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_jitter>())).amp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_jitter),
            "::",
            stringify!(amp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_jitter>())).cpsMin as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_jitter),
            "::",
            stringify!(cpsMin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_jitter>())).cpsMax as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_jitter),
            "::",
            stringify!(cpsMax)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_jitter>())).cps as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_jitter),
            "::",
            stringify!(cps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_jitter>())).phs as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_jitter),
            "::",
            stringify!(phs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_jitter>())).initflag as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_jitter),
            "::",
            stringify!(initflag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_jitter>())).num1 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_jitter),
            "::",
            stringify!(num1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_jitter>())).num2 as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_jitter),
            "::",
            stringify!(num2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_jitter>())).dfdmax as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_jitter),
            "::",
            stringify!(dfdmax)
        )
    );
}
extern "C" {
    pub fn sp_jitter_create(p: *mut *mut sp_jitter) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_jitter_destroy(p: *mut *mut sp_jitter) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_jitter_init(sp: *mut sp_data, p: *mut sp_jitter) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_jitter_compute(
        sp: *mut sp_data,
        p: *mut sp_jitter,
        in_: *mut f32,
        out: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_line {
    pub a: f32,
    pub dur: f32,
    pub b: f32,
    pub val: f32,
    pub incr: f32,
    pub sdur: u32,
    pub stime: u32,
    pub init: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sp_line() {
    assert_eq!(
        ::std::mem::size_of::<sp_line>(),
        32usize,
        concat!("Size of: ", stringify!(sp_line))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_line>(),
        4usize,
        concat!("Alignment of ", stringify!(sp_line))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_line>())).a as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_line),
            "::",
            stringify!(a)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_line>())).dur as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_line),
            "::",
            stringify!(dur)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_line>())).b as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_line),
            "::",
            stringify!(b)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_line>())).val as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_line),
            "::",
            stringify!(val)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_line>())).incr as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_line),
            "::",
            stringify!(incr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_line>())).sdur as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_line),
            "::",
            stringify!(sdur)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_line>())).stime as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_line),
            "::",
            stringify!(stime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_line>())).init as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_line),
            "::",
            stringify!(init)
        )
    );
}
extern "C" {
    pub fn sp_line_create(p: *mut *mut sp_line) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_line_destroy(p: *mut *mut sp_line) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_line_init(sp: *mut sp_data, p: *mut sp_line) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_line_compute(
        sp: *mut sp_data,
        p: *mut sp_line,
        in_: *mut f32,
        out: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_lpc {
    pub e: *mut openlpc_e_state,
    pub d: *mut openlpc_d_state,
    pub counter: ::std::os::raw::c_int,
    pub in_: *mut ::std::os::raw::c_short,
    pub out: *mut ::std::os::raw::c_short,
    pub data: [::std::os::raw::c_uchar; 7usize],
    pub y: [f32; 7usize],
    pub smooth: f32,
    pub samp: f32,
    pub clock: ::std::os::raw::c_uint,
    pub block: ::std::os::raw::c_uint,
    pub framesize: ::std::os::raw::c_int,
    pub m_in: sp_auxdata,
    pub m_out: sp_auxdata,
    pub m_e: sp_auxdata,
    pub m_d: sp_auxdata,
    pub mode: ::std::os::raw::c_int,
    pub ft: *mut sp_ftbl,
}
#[test]
fn bindgen_test_layout_sp_lpc() {
    assert_eq!(
        ::std::mem::size_of::<sp_lpc>(),
        176usize,
        concat!("Size of: ", stringify!(sp_lpc))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_lpc>(),
        8usize,
        concat!("Alignment of ", stringify!(sp_lpc))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_lpc>())).e as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(sp_lpc), "::", stringify!(e))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_lpc>())).d as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(sp_lpc), "::", stringify!(d))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_lpc>())).counter as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_lpc),
            "::",
            stringify!(counter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_lpc>())).in_ as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_lpc),
            "::",
            stringify!(in_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_lpc>())).out as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_lpc),
            "::",
            stringify!(out)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_lpc>())).data as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_lpc),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_lpc>())).y as *const _ as usize },
        48usize,
        concat!("Offset of field: ", stringify!(sp_lpc), "::", stringify!(y))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_lpc>())).smooth as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_lpc),
            "::",
            stringify!(smooth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_lpc>())).samp as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_lpc),
            "::",
            stringify!(samp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_lpc>())).clock as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_lpc),
            "::",
            stringify!(clock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_lpc>())).block as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_lpc),
            "::",
            stringify!(block)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_lpc>())).framesize as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_lpc),
            "::",
            stringify!(framesize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_lpc>())).m_in as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_lpc),
            "::",
            stringify!(m_in)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_lpc>())).m_out as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_lpc),
            "::",
            stringify!(m_out)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_lpc>())).m_e as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_lpc),
            "::",
            stringify!(m_e)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_lpc>())).m_d as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_lpc),
            "::",
            stringify!(m_d)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_lpc>())).mode as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_lpc),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_lpc>())).ft as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_lpc),
            "::",
            stringify!(ft)
        )
    );
}
extern "C" {
    pub fn sp_lpc_create(lpc: *mut *mut sp_lpc) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_lpc_destroy(lpc: *mut *mut sp_lpc) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_lpc_init(
        sp: *mut sp_data,
        lpc: *mut sp_lpc,
        framesize: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_lpc_synth(
        sp: *mut sp_data,
        lpc: *mut sp_lpc,
        ft: *mut sp_ftbl,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_lpc_compute(
        sp: *mut sp_data,
        lpc: *mut sp_lpc,
        in_: *mut f32,
        out: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_lpf18 {
    pub cutoff: f32,
    pub res: f32,
    pub dist: f32,
    pub ay1: f32,
    pub ay2: f32,
    pub aout: f32,
    pub lastin: f32,
    pub onedsr: f32,
}
#[test]
fn bindgen_test_layout_sp_lpf18() {
    assert_eq!(
        ::std::mem::size_of::<sp_lpf18>(),
        32usize,
        concat!("Size of: ", stringify!(sp_lpf18))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_lpf18>(),
        4usize,
        concat!("Alignment of ", stringify!(sp_lpf18))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_lpf18>())).cutoff as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_lpf18),
            "::",
            stringify!(cutoff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_lpf18>())).res as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_lpf18),
            "::",
            stringify!(res)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_lpf18>())).dist as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_lpf18),
            "::",
            stringify!(dist)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_lpf18>())).ay1 as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_lpf18),
            "::",
            stringify!(ay1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_lpf18>())).ay2 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_lpf18),
            "::",
            stringify!(ay2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_lpf18>())).aout as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_lpf18),
            "::",
            stringify!(aout)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_lpf18>())).lastin as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_lpf18),
            "::",
            stringify!(lastin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_lpf18>())).onedsr as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_lpf18),
            "::",
            stringify!(onedsr)
        )
    );
}
extern "C" {
    pub fn sp_lpf18_create(p: *mut *mut sp_lpf18) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_lpf18_destroy(p: *mut *mut sp_lpf18) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_lpf18_init(sp: *mut sp_data, p: *mut sp_lpf18) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_lpf18_compute(
        sp: *mut sp_data,
        p: *mut sp_lpf18,
        in_: *mut f32,
        out: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_maygate {
    pub prob: f32,
    pub gate: f32,
    pub mode: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sp_maygate() {
    assert_eq!(
        ::std::mem::size_of::<sp_maygate>(),
        12usize,
        concat!("Size of: ", stringify!(sp_maygate))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_maygate>(),
        4usize,
        concat!("Alignment of ", stringify!(sp_maygate))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_maygate>())).prob as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_maygate),
            "::",
            stringify!(prob)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_maygate>())).gate as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_maygate),
            "::",
            stringify!(gate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_maygate>())).mode as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_maygate),
            "::",
            stringify!(mode)
        )
    );
}
extern "C" {
    pub fn sp_maygate_create(p: *mut *mut sp_maygate) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_maygate_destroy(p: *mut *mut sp_maygate) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_maygate_init(sp: *mut sp_data, p: *mut sp_maygate) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_maygate_compute(
        sp: *mut sp_data,
        p: *mut sp_maygate,
        in_: *mut f32,
        out: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_metro {
    pub sr: f32,
    pub freq: f32,
    pub iphs: f32,
    pub curphs: f32,
    pub flag: ::std::os::raw::c_int,
    pub onedsr: f32,
}
#[test]
fn bindgen_test_layout_sp_metro() {
    assert_eq!(
        ::std::mem::size_of::<sp_metro>(),
        24usize,
        concat!("Size of: ", stringify!(sp_metro))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_metro>(),
        4usize,
        concat!("Alignment of ", stringify!(sp_metro))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_metro>())).sr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_metro),
            "::",
            stringify!(sr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_metro>())).freq as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_metro),
            "::",
            stringify!(freq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_metro>())).iphs as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_metro),
            "::",
            stringify!(iphs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_metro>())).curphs as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_metro),
            "::",
            stringify!(curphs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_metro>())).flag as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_metro),
            "::",
            stringify!(flag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_metro>())).onedsr as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_metro),
            "::",
            stringify!(onedsr)
        )
    );
}
extern "C" {
    pub fn sp_metro_create(p: *mut *mut sp_metro) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_metro_destroy(p: *mut *mut sp_metro) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_metro_init(sp: *mut sp_data, p: *mut sp_metro) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_metro_compute(
        sp: *mut sp_data,
        p: *mut sp_metro,
        in_: *mut f32,
        out: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_mincer {
    pub time: f32,
    pub amp: f32,
    pub pitch: f32,
    pub lock: f32,
    pub iN: f32,
    pub idecim: f32,
    pub onset: f32,
    pub offset: f32,
    pub dbthresh: f32,
    pub cnt: ::std::os::raw::c_int,
    pub hsize: ::std::os::raw::c_int,
    pub curframe: ::std::os::raw::c_int,
    pub N: ::std::os::raw::c_int,
    pub decim: ::std::os::raw::c_int,
    pub tscale: ::std::os::raw::c_int,
    pub pos: f32,
    pub accum: f32,
    pub outframe: sp_auxdata,
    pub win: sp_auxdata,
    pub bwin: sp_auxdata,
    pub fwin: sp_auxdata,
    pub nwin: sp_auxdata,
    pub prev: sp_auxdata,
    pub framecount: sp_auxdata,
    pub indata: [sp_auxdata; 2usize],
    pub tab: *mut f32,
    pub curbuf: ::std::os::raw::c_int,
    pub resamp: f32,
    pub ft: *mut sp_ftbl,
    pub fft: sp_fft,
}
#[test]
fn bindgen_test_layout_sp_mincer() {
    assert_eq!(
        ::std::mem::size_of::<sp_mincer>(),
        264usize,
        concat!("Size of: ", stringify!(sp_mincer))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_mincer>(),
        8usize,
        concat!("Alignment of ", stringify!(sp_mincer))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_mincer>())).time as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_mincer),
            "::",
            stringify!(time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_mincer>())).amp as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_mincer),
            "::",
            stringify!(amp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_mincer>())).pitch as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_mincer),
            "::",
            stringify!(pitch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_mincer>())).lock as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_mincer),
            "::",
            stringify!(lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_mincer>())).iN as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_mincer),
            "::",
            stringify!(iN)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_mincer>())).idecim as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_mincer),
            "::",
            stringify!(idecim)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_mincer>())).onset as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_mincer),
            "::",
            stringify!(onset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_mincer>())).offset as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_mincer),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_mincer>())).dbthresh as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_mincer),
            "::",
            stringify!(dbthresh)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_mincer>())).cnt as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_mincer),
            "::",
            stringify!(cnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_mincer>())).hsize as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_mincer),
            "::",
            stringify!(hsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_mincer>())).curframe as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_mincer),
            "::",
            stringify!(curframe)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_mincer>())).N as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_mincer),
            "::",
            stringify!(N)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_mincer>())).decim as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_mincer),
            "::",
            stringify!(decim)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_mincer>())).tscale as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_mincer),
            "::",
            stringify!(tscale)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_mincer>())).pos as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_mincer),
            "::",
            stringify!(pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_mincer>())).accum as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_mincer),
            "::",
            stringify!(accum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_mincer>())).outframe as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_mincer),
            "::",
            stringify!(outframe)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_mincer>())).win as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_mincer),
            "::",
            stringify!(win)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_mincer>())).bwin as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_mincer),
            "::",
            stringify!(bwin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_mincer>())).fwin as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_mincer),
            "::",
            stringify!(fwin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_mincer>())).nwin as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_mincer),
            "::",
            stringify!(nwin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_mincer>())).prev as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_mincer),
            "::",
            stringify!(prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_mincer>())).framecount as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_mincer),
            "::",
            stringify!(framecount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_mincer>())).indata as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_mincer),
            "::",
            stringify!(indata)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_mincer>())).tab as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_mincer),
            "::",
            stringify!(tab)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_mincer>())).curbuf as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_mincer),
            "::",
            stringify!(curbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_mincer>())).resamp as *const _ as usize },
        228usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_mincer),
            "::",
            stringify!(resamp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_mincer>())).ft as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_mincer),
            "::",
            stringify!(ft)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_mincer>())).fft as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_mincer),
            "::",
            stringify!(fft)
        )
    );
}
extern "C" {
    pub fn sp_mincer_create(p: *mut *mut sp_mincer) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_mincer_destroy(p: *mut *mut sp_mincer) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_mincer_init(
        sp: *mut sp_data,
        p: *mut sp_mincer,
        ft: *mut sp_ftbl,
        winsize: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_mincer_compute(
        sp: *mut sp_data,
        p: *mut sp_mincer,
        in_: *mut f32,
        out: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_mode {
    pub freq: f32,
    pub q: f32,
    pub xnm1: f32,
    pub ynm1: f32,
    pub ynm2: f32,
    pub a0: f32,
    pub a1: f32,
    pub a2: f32,
    pub d: f32,
    pub lfq: f32,
    pub lq: f32,
    pub sr: f32,
}
#[test]
fn bindgen_test_layout_sp_mode() {
    assert_eq!(
        ::std::mem::size_of::<sp_mode>(),
        48usize,
        concat!("Size of: ", stringify!(sp_mode))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_mode>(),
        4usize,
        concat!("Alignment of ", stringify!(sp_mode))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_mode>())).freq as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_mode),
            "::",
            stringify!(freq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_mode>())).q as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_mode),
            "::",
            stringify!(q)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_mode>())).xnm1 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_mode),
            "::",
            stringify!(xnm1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_mode>())).ynm1 as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_mode),
            "::",
            stringify!(ynm1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_mode>())).ynm2 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_mode),
            "::",
            stringify!(ynm2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_mode>())).a0 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_mode),
            "::",
            stringify!(a0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_mode>())).a1 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_mode),
            "::",
            stringify!(a1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_mode>())).a2 as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_mode),
            "::",
            stringify!(a2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_mode>())).d as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_mode),
            "::",
            stringify!(d)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_mode>())).lfq as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_mode),
            "::",
            stringify!(lfq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_mode>())).lq as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_mode),
            "::",
            stringify!(lq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_mode>())).sr as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_mode),
            "::",
            stringify!(sr)
        )
    );
}
extern "C" {
    pub fn sp_mode_create(p: *mut *mut sp_mode) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_mode_destroy(p: *mut *mut sp_mode) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_mode_init(sp: *mut sp_data, p: *mut sp_mode) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_mode_compute(
        sp: *mut sp_data,
        p: *mut sp_mode,
        in_: *mut f32,
        out: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_moogladder {
    pub freq: f32,
    pub res: f32,
    pub istor: f32,
    pub delay: [f32; 6usize],
    pub tanhstg: [f32; 3usize],
    pub oldfreq: f32,
    pub oldres: f32,
    pub oldacr: f32,
    pub oldtune: f32,
}
#[test]
fn bindgen_test_layout_sp_moogladder() {
    assert_eq!(
        ::std::mem::size_of::<sp_moogladder>(),
        64usize,
        concat!("Size of: ", stringify!(sp_moogladder))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_moogladder>(),
        4usize,
        concat!("Alignment of ", stringify!(sp_moogladder))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_moogladder>())).freq as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_moogladder),
            "::",
            stringify!(freq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_moogladder>())).res as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_moogladder),
            "::",
            stringify!(res)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_moogladder>())).istor as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_moogladder),
            "::",
            stringify!(istor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_moogladder>())).delay as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_moogladder),
            "::",
            stringify!(delay)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_moogladder>())).tanhstg as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_moogladder),
            "::",
            stringify!(tanhstg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_moogladder>())).oldfreq as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_moogladder),
            "::",
            stringify!(oldfreq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_moogladder>())).oldres as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_moogladder),
            "::",
            stringify!(oldres)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_moogladder>())).oldacr as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_moogladder),
            "::",
            stringify!(oldacr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_moogladder>())).oldtune as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_moogladder),
            "::",
            stringify!(oldtune)
        )
    );
}
extern "C" {
    pub fn sp_moogladder_create(t: *mut *mut sp_moogladder) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_moogladder_destroy(t: *mut *mut sp_moogladder) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_moogladder_init(sp: *mut sp_data, p: *mut sp_moogladder) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_moogladder_compute(
        sp: *mut sp_data,
        p: *mut sp_moogladder,
        in_: *mut f32,
        out: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_noise {
    pub amp: f32,
}
#[test]
fn bindgen_test_layout_sp_noise() {
    assert_eq!(
        ::std::mem::size_of::<sp_noise>(),
        4usize,
        concat!("Size of: ", stringify!(sp_noise))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_noise>(),
        4usize,
        concat!("Alignment of ", stringify!(sp_noise))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_noise>())).amp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_noise),
            "::",
            stringify!(amp)
        )
    );
}
extern "C" {
    pub fn sp_noise_create(ns: *mut *mut sp_noise) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_noise_init(sp: *mut sp_data, ns: *mut sp_noise) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_noise_compute(
        sp: *mut sp_data,
        ns: *mut sp_noise,
        in_: *mut f32,
        out: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_noise_destroy(ns: *mut *mut sp_noise) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct nano_entry {
    pub name: [::std::os::raw::c_char; 50usize],
    pub pos: u32,
    pub size: u32,
    pub speed: f32,
    pub next: *mut nano_entry,
}
#[test]
fn bindgen_test_layout_nano_entry() {
    assert_eq!(
        ::std::mem::size_of::<nano_entry>(),
        72usize,
        concat!("Size of: ", stringify!(nano_entry))
    );
    assert_eq!(
        ::std::mem::align_of::<nano_entry>(),
        8usize,
        concat!("Alignment of ", stringify!(nano_entry))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nano_entry>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nano_entry),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nano_entry>())).pos as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(nano_entry),
            "::",
            stringify!(pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nano_entry>())).size as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(nano_entry),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nano_entry>())).speed as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(nano_entry),
            "::",
            stringify!(speed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nano_entry>())).next as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(nano_entry),
            "::",
            stringify!(next)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct nano_dict {
    pub nval: ::std::os::raw::c_int,
    pub init: ::std::os::raw::c_int,
    pub root: nano_entry,
    pub last: *mut nano_entry,
}
#[test]
fn bindgen_test_layout_nano_dict() {
    assert_eq!(
        ::std::mem::size_of::<nano_dict>(),
        88usize,
        concat!("Size of: ", stringify!(nano_dict))
    );
    assert_eq!(
        ::std::mem::align_of::<nano_dict>(),
        8usize,
        concat!("Alignment of ", stringify!(nano_dict))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nano_dict>())).nval as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nano_dict),
            "::",
            stringify!(nval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nano_dict>())).init as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(nano_dict),
            "::",
            stringify!(init)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nano_dict>())).root as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(nano_dict),
            "::",
            stringify!(root)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nano_dict>())).last as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(nano_dict),
            "::",
            stringify!(last)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct nanosamp {
    pub ini: [::std::os::raw::c_char; 100usize],
    pub curpos: f32,
    pub dict: nano_dict,
    pub selected: ::std::os::raw::c_int,
    pub sample: *mut nano_entry,
    pub index: *mut *mut nano_entry,
    pub ft: *mut sp_ftbl,
    pub sr: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_nanosamp() {
    assert_eq!(
        ::std::mem::size_of::<nanosamp>(),
        232usize,
        concat!("Size of: ", stringify!(nanosamp))
    );
    assert_eq!(
        ::std::mem::align_of::<nanosamp>(),
        8usize,
        concat!("Alignment of ", stringify!(nanosamp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nanosamp>())).ini as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nanosamp),
            "::",
            stringify!(ini)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nanosamp>())).curpos as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(nanosamp),
            "::",
            stringify!(curpos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nanosamp>())).dict as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(nanosamp),
            "::",
            stringify!(dict)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nanosamp>())).selected as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(nanosamp),
            "::",
            stringify!(selected)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nanosamp>())).sample as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(nanosamp),
            "::",
            stringify!(sample)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nanosamp>())).index as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(nanosamp),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nanosamp>())).ft as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(nanosamp),
            "::",
            stringify!(ft)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nanosamp>())).sr as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(nanosamp),
            "::",
            stringify!(sr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_nsmp {
    pub smp: *mut nanosamp,
    pub index: u32,
    pub triggered: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sp_nsmp() {
    assert_eq!(
        ::std::mem::size_of::<sp_nsmp>(),
        16usize,
        concat!("Size of: ", stringify!(sp_nsmp))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_nsmp>(),
        8usize,
        concat!("Alignment of ", stringify!(sp_nsmp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_nsmp>())).smp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_nsmp),
            "::",
            stringify!(smp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_nsmp>())).index as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_nsmp),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_nsmp>())).triggered as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_nsmp),
            "::",
            stringify!(triggered)
        )
    );
}
extern "C" {
    pub fn sp_nsmp_create(p: *mut *mut sp_nsmp) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_nsmp_destroy(p: *mut *mut sp_nsmp) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_nsmp_init(
        sp: *mut sp_data,
        p: *mut sp_nsmp,
        ft: *mut sp_ftbl,
        sr: ::std::os::raw::c_int,
        ini: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_nsmp_compute(
        sp: *mut sp_data,
        p: *mut sp_nsmp,
        in_: *mut f32,
        out: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_nsmp_print_index(sp: *mut sp_data, p: *mut sp_nsmp) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_osc {
    pub freq: f32,
    pub amp: f32,
    pub iphs: f32,
    pub lphs: i32,
    pub tbl: *mut sp_ftbl,
    pub inc: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sp_osc() {
    assert_eq!(
        ::std::mem::size_of::<sp_osc>(),
        32usize,
        concat!("Size of: ", stringify!(sp_osc))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_osc>(),
        8usize,
        concat!("Alignment of ", stringify!(sp_osc))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_osc>())).freq as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_osc),
            "::",
            stringify!(freq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_osc>())).amp as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_osc),
            "::",
            stringify!(amp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_osc>())).iphs as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_osc),
            "::",
            stringify!(iphs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_osc>())).lphs as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_osc),
            "::",
            stringify!(lphs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_osc>())).tbl as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_osc),
            "::",
            stringify!(tbl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_osc>())).inc as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_osc),
            "::",
            stringify!(inc)
        )
    );
}
extern "C" {
    pub fn sp_osc_create(osc: *mut *mut sp_osc) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_osc_destroy(osc: *mut *mut sp_osc) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_osc_init(
        sp: *mut sp_data,
        osc: *mut sp_osc,
        ft: *mut sp_ftbl,
        iphs: f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_osc_compute(
        sp: *mut sp_data,
        osc: *mut sp_osc,
        in_: *mut f32,
        out: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_oscmorph {
    pub freq: f32,
    pub amp: f32,
    pub iphs: f32,
    pub lphs: i32,
    pub tbl: *mut *mut sp_ftbl,
    pub inc: ::std::os::raw::c_int,
    pub wtpos: f32,
    pub nft: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sp_oscmorph() {
    assert_eq!(
        ::std::mem::size_of::<sp_oscmorph>(),
        40usize,
        concat!("Size of: ", stringify!(sp_oscmorph))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_oscmorph>(),
        8usize,
        concat!("Alignment of ", stringify!(sp_oscmorph))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_oscmorph>())).freq as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_oscmorph),
            "::",
            stringify!(freq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_oscmorph>())).amp as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_oscmorph),
            "::",
            stringify!(amp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_oscmorph>())).iphs as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_oscmorph),
            "::",
            stringify!(iphs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_oscmorph>())).lphs as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_oscmorph),
            "::",
            stringify!(lphs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_oscmorph>())).tbl as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_oscmorph),
            "::",
            stringify!(tbl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_oscmorph>())).inc as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_oscmorph),
            "::",
            stringify!(inc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_oscmorph>())).wtpos as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_oscmorph),
            "::",
            stringify!(wtpos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_oscmorph>())).nft as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_oscmorph),
            "::",
            stringify!(nft)
        )
    );
}
extern "C" {
    pub fn sp_oscmorph_create(p: *mut *mut sp_oscmorph) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_oscmorph_destroy(p: *mut *mut sp_oscmorph) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_oscmorph_init(
        sp: *mut sp_data,
        osc: *mut sp_oscmorph,
        ft: *mut *mut sp_ftbl,
        nft: ::std::os::raw::c_int,
        iphs: f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_oscmorph_compute(
        sp: *mut sp_data,
        p: *mut sp_oscmorph,
        in_: *mut f32,
        out: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_pan2 {
    pub pan: f32,
    pub type_: u32,
}
#[test]
fn bindgen_test_layout_sp_pan2() {
    assert_eq!(
        ::std::mem::size_of::<sp_pan2>(),
        8usize,
        concat!("Size of: ", stringify!(sp_pan2))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_pan2>(),
        4usize,
        concat!("Alignment of ", stringify!(sp_pan2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_pan2>())).pan as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_pan2),
            "::",
            stringify!(pan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_pan2>())).type_ as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_pan2),
            "::",
            stringify!(type_)
        )
    );
}
extern "C" {
    pub fn sp_pan2_create(p: *mut *mut sp_pan2) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_pan2_destroy(p: *mut *mut sp_pan2) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_pan2_init(sp: *mut sp_data, p: *mut sp_pan2) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_pan2_compute(
        sp: *mut sp_data,
        p: *mut sp_pan2,
        in_: *mut f32,
        out1: *mut f32,
        out2: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_panst {
    pub pan: f32,
    pub type_: u32,
}
#[test]
fn bindgen_test_layout_sp_panst() {
    assert_eq!(
        ::std::mem::size_of::<sp_panst>(),
        8usize,
        concat!("Size of: ", stringify!(sp_panst))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_panst>(),
        4usize,
        concat!("Alignment of ", stringify!(sp_panst))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_panst>())).pan as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_panst),
            "::",
            stringify!(pan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_panst>())).type_ as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_panst),
            "::",
            stringify!(type_)
        )
    );
}
extern "C" {
    pub fn sp_panst_create(p: *mut *mut sp_panst) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_panst_destroy(p: *mut *mut sp_panst) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_panst_init(sp: *mut sp_data, p: *mut sp_panst) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_panst_compute(
        sp: *mut sp_data,
        p: *mut sp_panst,
        in1: *mut f32,
        in2: *mut f32,
        out1: *mut f32,
        out2: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_pareq {
    pub fc: f32,
    pub v: f32,
    pub q: f32,
    pub mode: f32,
    pub xnm1: f32,
    pub xnm2: f32,
    pub ynm1: f32,
    pub ynm2: f32,
    pub prv_fc: f32,
    pub prv_v: f32,
    pub prv_q: f32,
    pub b0: f32,
    pub b1: f32,
    pub b2: f32,
    pub a1: f32,
    pub a2: f32,
    pub tpidsr: f32,
    pub imode: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sp_pareq() {
    assert_eq!(
        ::std::mem::size_of::<sp_pareq>(),
        72usize,
        concat!("Size of: ", stringify!(sp_pareq))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_pareq>(),
        4usize,
        concat!("Alignment of ", stringify!(sp_pareq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_pareq>())).fc as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_pareq),
            "::",
            stringify!(fc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_pareq>())).v as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_pareq),
            "::",
            stringify!(v)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_pareq>())).q as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_pareq),
            "::",
            stringify!(q)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_pareq>())).mode as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_pareq),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_pareq>())).xnm1 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_pareq),
            "::",
            stringify!(xnm1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_pareq>())).xnm2 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_pareq),
            "::",
            stringify!(xnm2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_pareq>())).ynm1 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_pareq),
            "::",
            stringify!(ynm1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_pareq>())).ynm2 as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_pareq),
            "::",
            stringify!(ynm2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_pareq>())).prv_fc as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_pareq),
            "::",
            stringify!(prv_fc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_pareq>())).prv_v as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_pareq),
            "::",
            stringify!(prv_v)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_pareq>())).prv_q as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_pareq),
            "::",
            stringify!(prv_q)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_pareq>())).b0 as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_pareq),
            "::",
            stringify!(b0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_pareq>())).b1 as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_pareq),
            "::",
            stringify!(b1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_pareq>())).b2 as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_pareq),
            "::",
            stringify!(b2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_pareq>())).a1 as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_pareq),
            "::",
            stringify!(a1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_pareq>())).a2 as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_pareq),
            "::",
            stringify!(a2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_pareq>())).tpidsr as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_pareq),
            "::",
            stringify!(tpidsr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_pareq>())).imode as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_pareq),
            "::",
            stringify!(imode)
        )
    );
}
extern "C" {
    pub fn sp_pareq_create(p: *mut *mut sp_pareq) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_pareq_destroy(p: *mut *mut sp_pareq) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_pareq_init(sp: *mut sp_data, p: *mut sp_pareq) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_pareq_compute(
        sp: *mut sp_data,
        p: *mut sp_pareq,
        in_: *mut f32,
        out: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_paulstretch {
    pub windowsize: u32,
    pub half_windowsize: u32,
    pub stretch: f32,
    pub start_pos: f32,
    pub displace_pos: f32,
    pub window: *mut f32,
    pub old_windowed_buf: *mut f32,
    pub hinv_buf: *mut f32,
    pub buf: *mut f32,
    pub output: *mut f32,
    pub ft: *mut sp_ftbl,
    pub fft: kiss_fftr_cfg,
    pub ifft: kiss_fftr_cfg,
    pub tmp1: *mut kiss_fft_cpx,
    pub tmp2: *mut kiss_fft_cpx,
    pub counter: u32,
    pub m_window: sp_auxdata,
    pub m_old_windowed_buf: sp_auxdata,
    pub m_hinv_buf: sp_auxdata,
    pub m_buf: sp_auxdata,
    pub m_output: sp_auxdata,
    pub wrap: ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout_sp_paulstretch() {
    assert_eq!(
        ::std::mem::size_of::<sp_paulstretch>(),
        200usize,
        concat!("Size of: ", stringify!(sp_paulstretch))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_paulstretch>(),
        8usize,
        concat!("Alignment of ", stringify!(sp_paulstretch))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_paulstretch>())).windowsize as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_paulstretch),
            "::",
            stringify!(windowsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_paulstretch>())).half_windowsize as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_paulstretch),
            "::",
            stringify!(half_windowsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_paulstretch>())).stretch as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_paulstretch),
            "::",
            stringify!(stretch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_paulstretch>())).start_pos as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_paulstretch),
            "::",
            stringify!(start_pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_paulstretch>())).displace_pos as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_paulstretch),
            "::",
            stringify!(displace_pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_paulstretch>())).window as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_paulstretch),
            "::",
            stringify!(window)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_paulstretch>())).old_windowed_buf as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_paulstretch),
            "::",
            stringify!(old_windowed_buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_paulstretch>())).hinv_buf as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_paulstretch),
            "::",
            stringify!(hinv_buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_paulstretch>())).buf as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_paulstretch),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_paulstretch>())).output as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_paulstretch),
            "::",
            stringify!(output)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_paulstretch>())).ft as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_paulstretch),
            "::",
            stringify!(ft)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_paulstretch>())).fft as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_paulstretch),
            "::",
            stringify!(fft)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_paulstretch>())).ifft as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_paulstretch),
            "::",
            stringify!(ifft)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_paulstretch>())).tmp1 as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_paulstretch),
            "::",
            stringify!(tmp1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_paulstretch>())).tmp2 as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_paulstretch),
            "::",
            stringify!(tmp2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_paulstretch>())).counter as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_paulstretch),
            "::",
            stringify!(counter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_paulstretch>())).m_window as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_paulstretch),
            "::",
            stringify!(m_window)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sp_paulstretch>())).m_old_windowed_buf as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_paulstretch),
            "::",
            stringify!(m_old_windowed_buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_paulstretch>())).m_hinv_buf as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_paulstretch),
            "::",
            stringify!(m_hinv_buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_paulstretch>())).m_buf as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_paulstretch),
            "::",
            stringify!(m_buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_paulstretch>())).m_output as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_paulstretch),
            "::",
            stringify!(m_output)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_paulstretch>())).wrap as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_paulstretch),
            "::",
            stringify!(wrap)
        )
    );
}
extern "C" {
    pub fn sp_paulstretch_create(p: *mut *mut sp_paulstretch) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_paulstretch_destroy(p: *mut *mut sp_paulstretch) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_paulstretch_init(
        sp: *mut sp_data,
        p: *mut sp_paulstretch,
        ft: *mut sp_ftbl,
        windowsize: f32,
        stretch: f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_paulstretch_compute(
        sp: *mut sp_data,
        p: *mut sp_paulstretch,
        in_: *mut f32,
        out: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_pdhalf {
    pub amount: f32,
    pub ibipolar: f32,
    pub ifullscale: f32,
}
#[test]
fn bindgen_test_layout_sp_pdhalf() {
    assert_eq!(
        ::std::mem::size_of::<sp_pdhalf>(),
        12usize,
        concat!("Size of: ", stringify!(sp_pdhalf))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_pdhalf>(),
        4usize,
        concat!("Alignment of ", stringify!(sp_pdhalf))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_pdhalf>())).amount as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_pdhalf),
            "::",
            stringify!(amount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_pdhalf>())).ibipolar as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_pdhalf),
            "::",
            stringify!(ibipolar)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_pdhalf>())).ifullscale as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_pdhalf),
            "::",
            stringify!(ifullscale)
        )
    );
}
extern "C" {
    pub fn sp_pdhalf_create(p: *mut *mut sp_pdhalf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_pdhalf_destroy(p: *mut *mut sp_pdhalf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_pdhalf_init(sp: *mut sp_data, p: *mut sp_pdhalf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_pdhalf_compute(
        sp: *mut sp_data,
        p: *mut sp_pdhalf,
        in_: *mut f32,
        out: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_peaklim {
    pub atk: f32,
    pub rel: f32,
    pub thresh: f32,
    pub patk: f32,
    pub prel: f32,
    pub b0_r: f32,
    pub a1_r: f32,
    pub b0_a: f32,
    pub a1_a: f32,
    pub level: f32,
}
#[test]
fn bindgen_test_layout_sp_peaklim() {
    assert_eq!(
        ::std::mem::size_of::<sp_peaklim>(),
        40usize,
        concat!("Size of: ", stringify!(sp_peaklim))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_peaklim>(),
        4usize,
        concat!("Alignment of ", stringify!(sp_peaklim))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_peaklim>())).atk as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_peaklim),
            "::",
            stringify!(atk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_peaklim>())).rel as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_peaklim),
            "::",
            stringify!(rel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_peaklim>())).thresh as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_peaklim),
            "::",
            stringify!(thresh)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_peaklim>())).patk as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_peaklim),
            "::",
            stringify!(patk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_peaklim>())).prel as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_peaklim),
            "::",
            stringify!(prel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_peaklim>())).b0_r as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_peaklim),
            "::",
            stringify!(b0_r)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_peaklim>())).a1_r as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_peaklim),
            "::",
            stringify!(a1_r)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_peaklim>())).b0_a as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_peaklim),
            "::",
            stringify!(b0_a)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_peaklim>())).a1_a as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_peaklim),
            "::",
            stringify!(a1_a)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_peaklim>())).level as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_peaklim),
            "::",
            stringify!(level)
        )
    );
}
extern "C" {
    pub fn sp_peaklim_create(p: *mut *mut sp_peaklim) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_peaklim_destroy(p: *mut *mut sp_peaklim) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_peaklim_init(sp: *mut sp_data, p: *mut sp_peaklim) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_peaklim_compute(
        sp: *mut sp_data,
        p: *mut sp_peaklim,
        in_: *mut f32,
        out: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_phaser {
    pub faust: *mut ::std::os::raw::c_void,
    pub argpos: ::std::os::raw::c_int,
    pub args: [*mut f32; 10usize],
    pub MaxNotch1Freq: *mut f32,
    pub MinNotch1Freq: *mut f32,
    pub Notch_width: *mut f32,
    pub NotchFreq: *mut f32,
    pub VibratoMode: *mut f32,
    pub depth: *mut f32,
    pub feedback_gain: *mut f32,
    pub invert: *mut f32,
    pub level: *mut f32,
    pub lfobpm: *mut f32,
}
#[test]
fn bindgen_test_layout_sp_phaser() {
    assert_eq!(
        ::std::mem::size_of::<sp_phaser>(),
        176usize,
        concat!("Size of: ", stringify!(sp_phaser))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_phaser>(),
        8usize,
        concat!("Alignment of ", stringify!(sp_phaser))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_phaser>())).faust as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_phaser),
            "::",
            stringify!(faust)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_phaser>())).argpos as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_phaser),
            "::",
            stringify!(argpos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_phaser>())).args as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_phaser),
            "::",
            stringify!(args)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_phaser>())).MaxNotch1Freq as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_phaser),
            "::",
            stringify!(MaxNotch1Freq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_phaser>())).MinNotch1Freq as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_phaser),
            "::",
            stringify!(MinNotch1Freq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_phaser>())).Notch_width as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_phaser),
            "::",
            stringify!(Notch_width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_phaser>())).NotchFreq as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_phaser),
            "::",
            stringify!(NotchFreq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_phaser>())).VibratoMode as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_phaser),
            "::",
            stringify!(VibratoMode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_phaser>())).depth as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_phaser),
            "::",
            stringify!(depth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_phaser>())).feedback_gain as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_phaser),
            "::",
            stringify!(feedback_gain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_phaser>())).invert as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_phaser),
            "::",
            stringify!(invert)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_phaser>())).level as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_phaser),
            "::",
            stringify!(level)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_phaser>())).lfobpm as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_phaser),
            "::",
            stringify!(lfobpm)
        )
    );
}
extern "C" {
    pub fn sp_phaser_create(p: *mut *mut sp_phaser) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_phaser_destroy(p: *mut *mut sp_phaser) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_phaser_init(sp: *mut sp_data, p: *mut sp_phaser) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_phaser_compute(
        sp: *mut sp_data,
        p: *mut sp_phaser,
        in1: *mut f32,
        in2: *mut f32,
        out1: *mut f32,
        out2: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_phasor {
    pub freq: f32,
    pub phs: f32,
    pub curphs: f32,
    pub onedsr: f32,
}
#[test]
fn bindgen_test_layout_sp_phasor() {
    assert_eq!(
        ::std::mem::size_of::<sp_phasor>(),
        16usize,
        concat!("Size of: ", stringify!(sp_phasor))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_phasor>(),
        4usize,
        concat!("Alignment of ", stringify!(sp_phasor))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_phasor>())).freq as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_phasor),
            "::",
            stringify!(freq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_phasor>())).phs as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_phasor),
            "::",
            stringify!(phs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_phasor>())).curphs as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_phasor),
            "::",
            stringify!(curphs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_phasor>())).onedsr as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_phasor),
            "::",
            stringify!(onedsr)
        )
    );
}
extern "C" {
    pub fn sp_phasor_create(p: *mut *mut sp_phasor) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_phasor_destroy(p: *mut *mut sp_phasor) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_phasor_init(sp: *mut sp_data, p: *mut sp_phasor, iphs: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_phasor_compute(
        sp: *mut sp_data,
        p: *mut sp_phasor,
        in_: *mut f32,
        out: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_pinknoise {
    pub amp: f32,
    pub newrand: ::std::os::raw::c_uint,
    pub prevrand: ::std::os::raw::c_uint,
    pub k: ::std::os::raw::c_uint,
    pub seed: ::std::os::raw::c_uint,
    pub total: ::std::os::raw::c_uint,
    pub counter: u32,
    pub dice: [::std::os::raw::c_uint; 7usize],
}
#[test]
fn bindgen_test_layout_sp_pinknoise() {
    assert_eq!(
        ::std::mem::size_of::<sp_pinknoise>(),
        56usize,
        concat!("Size of: ", stringify!(sp_pinknoise))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_pinknoise>(),
        4usize,
        concat!("Alignment of ", stringify!(sp_pinknoise))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_pinknoise>())).amp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_pinknoise),
            "::",
            stringify!(amp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_pinknoise>())).newrand as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_pinknoise),
            "::",
            stringify!(newrand)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_pinknoise>())).prevrand as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_pinknoise),
            "::",
            stringify!(prevrand)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_pinknoise>())).k as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_pinknoise),
            "::",
            stringify!(k)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_pinknoise>())).seed as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_pinknoise),
            "::",
            stringify!(seed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_pinknoise>())).total as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_pinknoise),
            "::",
            stringify!(total)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_pinknoise>())).counter as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_pinknoise),
            "::",
            stringify!(counter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_pinknoise>())).dice as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_pinknoise),
            "::",
            stringify!(dice)
        )
    );
}
extern "C" {
    pub fn sp_pinknoise_create(p: *mut *mut sp_pinknoise) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_pinknoise_destroy(p: *mut *mut sp_pinknoise) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_pinknoise_init(sp: *mut sp_data, p: *mut sp_pinknoise) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_pinknoise_compute(
        sp: *mut sp_data,
        p: *mut sp_pinknoise,
        in_: *mut f32,
        out: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_pitchamdf {
    pub imincps: f32,
    pub imaxcps: f32,
    pub icps: f32,
    pub imedi: f32,
    pub idowns: f32,
    pub iexcps: f32,
    pub irmsmedi: f32,
    pub srate: f32,
    pub lastval: f32,
    pub downsamp: i32,
    pub upsamp: i32,
    pub minperi: i32,
    pub maxperi: i32,
    pub index: i32,
    pub readp: i32,
    pub size: i32,
    pub peri: i32,
    pub medisize: i32,
    pub mediptr: i32,
    pub rmsmedisize: i32,
    pub rmsmediptr: i32,
    pub inerr: ::std::os::raw::c_int,
    pub median: sp_auxdata,
    pub rmsmedian: sp_auxdata,
    pub buffer: sp_auxdata,
}
#[test]
fn bindgen_test_layout_sp_pitchamdf() {
    assert_eq!(
        ::std::mem::size_of::<sp_pitchamdf>(),
        136usize,
        concat!("Size of: ", stringify!(sp_pitchamdf))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_pitchamdf>(),
        8usize,
        concat!("Alignment of ", stringify!(sp_pitchamdf))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_pitchamdf>())).imincps as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_pitchamdf),
            "::",
            stringify!(imincps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_pitchamdf>())).imaxcps as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_pitchamdf),
            "::",
            stringify!(imaxcps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_pitchamdf>())).icps as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_pitchamdf),
            "::",
            stringify!(icps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_pitchamdf>())).imedi as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_pitchamdf),
            "::",
            stringify!(imedi)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_pitchamdf>())).idowns as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_pitchamdf),
            "::",
            stringify!(idowns)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_pitchamdf>())).iexcps as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_pitchamdf),
            "::",
            stringify!(iexcps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_pitchamdf>())).irmsmedi as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_pitchamdf),
            "::",
            stringify!(irmsmedi)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_pitchamdf>())).srate as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_pitchamdf),
            "::",
            stringify!(srate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_pitchamdf>())).lastval as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_pitchamdf),
            "::",
            stringify!(lastval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_pitchamdf>())).downsamp as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_pitchamdf),
            "::",
            stringify!(downsamp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_pitchamdf>())).upsamp as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_pitchamdf),
            "::",
            stringify!(upsamp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_pitchamdf>())).minperi as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_pitchamdf),
            "::",
            stringify!(minperi)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_pitchamdf>())).maxperi as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_pitchamdf),
            "::",
            stringify!(maxperi)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_pitchamdf>())).index as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_pitchamdf),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_pitchamdf>())).readp as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_pitchamdf),
            "::",
            stringify!(readp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_pitchamdf>())).size as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_pitchamdf),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_pitchamdf>())).peri as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_pitchamdf),
            "::",
            stringify!(peri)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_pitchamdf>())).medisize as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_pitchamdf),
            "::",
            stringify!(medisize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_pitchamdf>())).mediptr as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_pitchamdf),
            "::",
            stringify!(mediptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_pitchamdf>())).rmsmedisize as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_pitchamdf),
            "::",
            stringify!(rmsmedisize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_pitchamdf>())).rmsmediptr as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_pitchamdf),
            "::",
            stringify!(rmsmediptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_pitchamdf>())).inerr as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_pitchamdf),
            "::",
            stringify!(inerr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_pitchamdf>())).median as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_pitchamdf),
            "::",
            stringify!(median)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_pitchamdf>())).rmsmedian as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_pitchamdf),
            "::",
            stringify!(rmsmedian)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_pitchamdf>())).buffer as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_pitchamdf),
            "::",
            stringify!(buffer)
        )
    );
}
extern "C" {
    pub fn sp_pitchamdf_create(p: *mut *mut sp_pitchamdf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_pitchamdf_destroy(p: *mut *mut sp_pitchamdf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_pitchamdf_init(
        sp: *mut sp_data,
        p: *mut sp_pitchamdf,
        imincps: f32,
        imaxcps: f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_pitchamdf_compute(
        sp: *mut sp_data,
        p: *mut sp_pitchamdf,
        in_: *mut f32,
        cps: *mut f32,
        rms: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_pluck {
    pub amp: f32,
    pub freq: f32,
    pub ifreq: f32,
    pub sicps: f32,
    pub phs256: i32,
    pub npts: i32,
    pub maxpts: i32,
    pub auxch: sp_auxdata,
    pub init: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_sp_pluck() {
    assert_eq!(
        ::std::mem::size_of::<sp_pluck>(),
        56usize,
        concat!("Size of: ", stringify!(sp_pluck))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_pluck>(),
        8usize,
        concat!("Alignment of ", stringify!(sp_pluck))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_pluck>())).amp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_pluck),
            "::",
            stringify!(amp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_pluck>())).freq as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_pluck),
            "::",
            stringify!(freq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_pluck>())).ifreq as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_pluck),
            "::",
            stringify!(ifreq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_pluck>())).sicps as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_pluck),
            "::",
            stringify!(sicps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_pluck>())).phs256 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_pluck),
            "::",
            stringify!(phs256)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_pluck>())).npts as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_pluck),
            "::",
            stringify!(npts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_pluck>())).maxpts as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_pluck),
            "::",
            stringify!(maxpts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_pluck>())).auxch as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_pluck),
            "::",
            stringify!(auxch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_pluck>())).init as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_pluck),
            "::",
            stringify!(init)
        )
    );
}
extern "C" {
    pub fn sp_pluck_create(p: *mut *mut sp_pluck) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_pluck_destroy(p: *mut *mut sp_pluck) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_pluck_init(sp: *mut sp_data, p: *mut sp_pluck, ifreq: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_pluck_compute(
        sp: *mut sp_data,
        p: *mut sp_pluck,
        trig: *mut f32,
        out: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_port {
    pub htime: f32,
    pub c1: f32,
    pub c2: f32,
    pub yt1: f32,
    pub prvhtim: f32,
    pub sr: f32,
    pub onedsr: f32,
}
#[test]
fn bindgen_test_layout_sp_port() {
    assert_eq!(
        ::std::mem::size_of::<sp_port>(),
        28usize,
        concat!("Size of: ", stringify!(sp_port))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_port>(),
        4usize,
        concat!("Alignment of ", stringify!(sp_port))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_port>())).htime as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_port),
            "::",
            stringify!(htime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_port>())).c1 as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_port),
            "::",
            stringify!(c1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_port>())).c2 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_port),
            "::",
            stringify!(c2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_port>())).yt1 as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_port),
            "::",
            stringify!(yt1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_port>())).prvhtim as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_port),
            "::",
            stringify!(prvhtim)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_port>())).sr as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_port),
            "::",
            stringify!(sr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_port>())).onedsr as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_port),
            "::",
            stringify!(onedsr)
        )
    );
}
extern "C" {
    pub fn sp_port_create(p: *mut *mut sp_port) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_port_destroy(p: *mut *mut sp_port) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_port_init(sp: *mut sp_data, p: *mut sp_port, htime: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_port_compute(
        sp: *mut sp_data,
        p: *mut sp_port,
        in_: *mut f32,
        out: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_port_reset(sp: *mut sp_data, p: *mut sp_port, in_: *mut f32)
        -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_posc3 {
    pub freq: f32,
    pub amp: f32,
    pub iphs: f32,
    pub tbl: *mut sp_ftbl,
    pub tablen: i32,
    pub tablenUPsr: f32,
    pub phs: f32,
    pub onedsr: f32,
}
#[test]
fn bindgen_test_layout_sp_posc3() {
    assert_eq!(
        ::std::mem::size_of::<sp_posc3>(),
        40usize,
        concat!("Size of: ", stringify!(sp_posc3))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_posc3>(),
        8usize,
        concat!("Alignment of ", stringify!(sp_posc3))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_posc3>())).freq as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_posc3),
            "::",
            stringify!(freq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_posc3>())).amp as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_posc3),
            "::",
            stringify!(amp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_posc3>())).iphs as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_posc3),
            "::",
            stringify!(iphs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_posc3>())).tbl as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_posc3),
            "::",
            stringify!(tbl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_posc3>())).tablen as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_posc3),
            "::",
            stringify!(tablen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_posc3>())).tablenUPsr as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_posc3),
            "::",
            stringify!(tablenUPsr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_posc3>())).phs as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_posc3),
            "::",
            stringify!(phs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_posc3>())).onedsr as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_posc3),
            "::",
            stringify!(onedsr)
        )
    );
}
extern "C" {
    pub fn sp_posc3_create(posc3: *mut *mut sp_posc3) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_posc3_destroy(posc3: *mut *mut sp_posc3) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_posc3_init(
        sp: *mut sp_data,
        posc3: *mut sp_posc3,
        ft: *mut sp_ftbl,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_posc3_compute(
        sp: *mut sp_data,
        posc3: *mut sp_posc3,
        in_: *mut f32,
        out: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_progress {
    pub nbars: ::std::os::raw::c_int,
    pub skip: ::std::os::raw::c_int,
    pub counter: ::std::os::raw::c_int,
    pub len: u32,
}
#[test]
fn bindgen_test_layout_sp_progress() {
    assert_eq!(
        ::std::mem::size_of::<sp_progress>(),
        16usize,
        concat!("Size of: ", stringify!(sp_progress))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_progress>(),
        4usize,
        concat!("Alignment of ", stringify!(sp_progress))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_progress>())).nbars as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_progress),
            "::",
            stringify!(nbars)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_progress>())).skip as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_progress),
            "::",
            stringify!(skip)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_progress>())).counter as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_progress),
            "::",
            stringify!(counter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_progress>())).len as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_progress),
            "::",
            stringify!(len)
        )
    );
}
extern "C" {
    pub fn sp_progress_create(p: *mut *mut sp_progress) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_progress_destroy(p: *mut *mut sp_progress) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_progress_init(sp: *mut sp_data, p: *mut sp_progress) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_progress_compute(
        sp: *mut sp_data,
        p: *mut sp_progress,
        in_: *mut f32,
        out: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct prop_event {
    pub type_: ::std::os::raw::c_char,
    pub pos: u32,
    pub val: u32,
    pub cons: u32,
}
#[test]
fn bindgen_test_layout_prop_event() {
    assert_eq!(
        ::std::mem::size_of::<prop_event>(),
        16usize,
        concat!("Size of: ", stringify!(prop_event))
    );
    assert_eq!(
        ::std::mem::align_of::<prop_event>(),
        4usize,
        concat!("Alignment of ", stringify!(prop_event))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<prop_event>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(prop_event),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<prop_event>())).pos as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(prop_event),
            "::",
            stringify!(pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<prop_event>())).val as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(prop_event),
            "::",
            stringify!(val)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<prop_event>())).cons as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(prop_event),
            "::",
            stringify!(cons)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct prop_val {
    pub type_: ::std::os::raw::c_char,
    pub ud: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_prop_val() {
    assert_eq!(
        ::std::mem::size_of::<prop_val>(),
        16usize,
        concat!("Size of: ", stringify!(prop_val))
    );
    assert_eq!(
        ::std::mem::align_of::<prop_val>(),
        8usize,
        concat!("Alignment of ", stringify!(prop_val))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<prop_val>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(prop_val),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<prop_val>())).ud as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(prop_val),
            "::",
            stringify!(ud)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct prop_entry {
    pub val: prop_val,
    pub next: *mut prop_entry,
}
#[test]
fn bindgen_test_layout_prop_entry() {
    assert_eq!(
        ::std::mem::size_of::<prop_entry>(),
        24usize,
        concat!("Size of: ", stringify!(prop_entry))
    );
    assert_eq!(
        ::std::mem::align_of::<prop_entry>(),
        8usize,
        concat!("Alignment of ", stringify!(prop_entry))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<prop_entry>())).val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(prop_entry),
            "::",
            stringify!(val)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<prop_entry>())).next as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(prop_entry),
            "::",
            stringify!(next)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct prop_list {
    pub root: prop_entry,
    pub last: *mut prop_entry,
    pub size: u32,
    pub pos: u32,
    pub top: *mut prop_list,
    pub lvl: u32,
}
#[test]
fn bindgen_test_layout_prop_list() {
    assert_eq!(
        ::std::mem::size_of::<prop_list>(),
        56usize,
        concat!("Size of: ", stringify!(prop_list))
    );
    assert_eq!(
        ::std::mem::align_of::<prop_list>(),
        8usize,
        concat!("Alignment of ", stringify!(prop_list))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<prop_list>())).root as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(prop_list),
            "::",
            stringify!(root)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<prop_list>())).last as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(prop_list),
            "::",
            stringify!(last)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<prop_list>())).size as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(prop_list),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<prop_list>())).pos as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(prop_list),
            "::",
            stringify!(pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<prop_list>())).top as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(prop_list),
            "::",
            stringify!(top)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<prop_list>())).lvl as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(prop_list),
            "::",
            stringify!(lvl)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct prop_stack {
    pub stack: [u32; 16usize],
    pub pos: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_prop_stack() {
    assert_eq!(
        ::std::mem::size_of::<prop_stack>(),
        68usize,
        concat!("Size of: ", stringify!(prop_stack))
    );
    assert_eq!(
        ::std::mem::align_of::<prop_stack>(),
        4usize,
        concat!("Alignment of ", stringify!(prop_stack))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<prop_stack>())).stack as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(prop_stack),
            "::",
            stringify!(stack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<prop_stack>())).pos as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(prop_stack),
            "::",
            stringify!(pos)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct prop_data {
    pub mul: u32,
    pub div: u32,
    pub tmp: u32,
    pub cons_mul: u32,
    pub cons_div: u32,
    pub scale: f32,
    pub mode: ::std::os::raw::c_int,
    pub pos: u32,
    pub top: prop_list,
    pub main: *mut prop_list,
    pub mstack: prop_stack,
    pub cstack: prop_stack,
}
#[test]
fn bindgen_test_layout_prop_data() {
    assert_eq!(
        ::std::mem::size_of::<prop_data>(),
        232usize,
        concat!("Size of: ", stringify!(prop_data))
    );
    assert_eq!(
        ::std::mem::align_of::<prop_data>(),
        8usize,
        concat!("Alignment of ", stringify!(prop_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<prop_data>())).mul as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(prop_data),
            "::",
            stringify!(mul)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<prop_data>())).div as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(prop_data),
            "::",
            stringify!(div)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<prop_data>())).tmp as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(prop_data),
            "::",
            stringify!(tmp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<prop_data>())).cons_mul as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(prop_data),
            "::",
            stringify!(cons_mul)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<prop_data>())).cons_div as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(prop_data),
            "::",
            stringify!(cons_div)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<prop_data>())).scale as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(prop_data),
            "::",
            stringify!(scale)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<prop_data>())).mode as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(prop_data),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<prop_data>())).pos as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(prop_data),
            "::",
            stringify!(pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<prop_data>())).top as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(prop_data),
            "::",
            stringify!(top)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<prop_data>())).main as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(prop_data),
            "::",
            stringify!(main)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<prop_data>())).mstack as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(prop_data),
            "::",
            stringify!(mstack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<prop_data>())).cstack as *const _ as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(prop_data),
            "::",
            stringify!(cstack)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_prop {
    pub prp: *mut prop_data,
    pub evt: prop_event,
    pub count: u32,
    pub bpm: f32,
    pub lbpm: f32,
}
#[test]
fn bindgen_test_layout_sp_prop() {
    assert_eq!(
        ::std::mem::size_of::<sp_prop>(),
        40usize,
        concat!("Size of: ", stringify!(sp_prop))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_prop>(),
        8usize,
        concat!("Alignment of ", stringify!(sp_prop))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_prop>())).prp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_prop),
            "::",
            stringify!(prp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_prop>())).evt as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_prop),
            "::",
            stringify!(evt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_prop>())).count as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_prop),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_prop>())).bpm as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_prop),
            "::",
            stringify!(bpm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_prop>())).lbpm as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_prop),
            "::",
            stringify!(lbpm)
        )
    );
}
extern "C" {
    pub fn sp_prop_create(p: *mut *mut sp_prop) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_prop_destroy(p: *mut *mut sp_prop) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_prop_reset(sp: *mut sp_data, p: *mut sp_prop) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_prop_init(
        sp: *mut sp_data,
        p: *mut sp_prop,
        str_: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_prop_compute(
        sp: *mut sp_data,
        p: *mut sp_prop,
        in_: *mut f32,
        out: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_pshift {
    pub faust: *mut ::std::os::raw::c_void,
    pub argpos: ::std::os::raw::c_int,
    pub args: [*mut f32; 3usize],
    pub shift: *mut f32,
    pub window: *mut f32,
    pub xfade: *mut f32,
}
#[test]
fn bindgen_test_layout_sp_pshift() {
    assert_eq!(
        ::std::mem::size_of::<sp_pshift>(),
        64usize,
        concat!("Size of: ", stringify!(sp_pshift))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_pshift>(),
        8usize,
        concat!("Alignment of ", stringify!(sp_pshift))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_pshift>())).faust as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_pshift),
            "::",
            stringify!(faust)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_pshift>())).argpos as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_pshift),
            "::",
            stringify!(argpos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_pshift>())).args as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_pshift),
            "::",
            stringify!(args)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_pshift>())).shift as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_pshift),
            "::",
            stringify!(shift)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_pshift>())).window as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_pshift),
            "::",
            stringify!(window)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_pshift>())).xfade as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_pshift),
            "::",
            stringify!(xfade)
        )
    );
}
extern "C" {
    pub fn sp_pshift_create(p: *mut *mut sp_pshift) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_pshift_destroy(p: *mut *mut sp_pshift) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_pshift_init(sp: *mut sp_data, p: *mut sp_pshift) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_pshift_compute(
        sp: *mut sp_data,
        p: *mut sp_pshift,
        in_: *mut f32,
        out: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_ptrack {
    pub freq: f32,
    pub amp: f32,
    pub asig: f32,
    pub size: f32,
    pub peak: f32,
    pub signal: sp_auxdata,
    pub prev: sp_auxdata,
    pub sin: sp_auxdata,
    pub spec1: sp_auxdata,
    pub spec2: sp_auxdata,
    pub peakarray: sp_auxdata,
    pub numpks: ::std::os::raw::c_int,
    pub cnt: ::std::os::raw::c_int,
    pub histcnt: ::std::os::raw::c_int,
    pub hopsize: ::std::os::raw::c_int,
    pub sr: f32,
    pub cps: f32,
    pub dbs: [f32; 20usize],
    pub amplo: f32,
    pub amphi: f32,
    pub npartial: f32,
    pub dbfs: f32,
    pub prevf: f32,
    pub fft: sp_fft,
}
#[test]
fn bindgen_test_layout_sp_ptrack() {
    assert_eq!(
        ::std::mem::size_of::<sp_ptrack>(),
        272usize,
        concat!("Size of: ", stringify!(sp_ptrack))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_ptrack>(),
        8usize,
        concat!("Alignment of ", stringify!(sp_ptrack))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_ptrack>())).freq as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_ptrack),
            "::",
            stringify!(freq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_ptrack>())).amp as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_ptrack),
            "::",
            stringify!(amp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_ptrack>())).asig as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_ptrack),
            "::",
            stringify!(asig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_ptrack>())).size as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_ptrack),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_ptrack>())).peak as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_ptrack),
            "::",
            stringify!(peak)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_ptrack>())).signal as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_ptrack),
            "::",
            stringify!(signal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_ptrack>())).prev as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_ptrack),
            "::",
            stringify!(prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_ptrack>())).sin as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_ptrack),
            "::",
            stringify!(sin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_ptrack>())).spec1 as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_ptrack),
            "::",
            stringify!(spec1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_ptrack>())).spec2 as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_ptrack),
            "::",
            stringify!(spec2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_ptrack>())).peakarray as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_ptrack),
            "::",
            stringify!(peakarray)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_ptrack>())).numpks as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_ptrack),
            "::",
            stringify!(numpks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_ptrack>())).cnt as *const _ as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_ptrack),
            "::",
            stringify!(cnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_ptrack>())).histcnt as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_ptrack),
            "::",
            stringify!(histcnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_ptrack>())).hopsize as *const _ as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_ptrack),
            "::",
            stringify!(hopsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_ptrack>())).sr as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_ptrack),
            "::",
            stringify!(sr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_ptrack>())).cps as *const _ as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_ptrack),
            "::",
            stringify!(cps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_ptrack>())).dbs as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_ptrack),
            "::",
            stringify!(dbs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_ptrack>())).amplo as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_ptrack),
            "::",
            stringify!(amplo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_ptrack>())).amphi as *const _ as usize },
        228usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_ptrack),
            "::",
            stringify!(amphi)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_ptrack>())).npartial as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_ptrack),
            "::",
            stringify!(npartial)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_ptrack>())).dbfs as *const _ as usize },
        236usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_ptrack),
            "::",
            stringify!(dbfs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_ptrack>())).prevf as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_ptrack),
            "::",
            stringify!(prevf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_ptrack>())).fft as *const _ as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_ptrack),
            "::",
            stringify!(fft)
        )
    );
}
extern "C" {
    pub fn sp_ptrack_create(p: *mut *mut sp_ptrack) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_ptrack_destroy(p: *mut *mut sp_ptrack) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_ptrack_init(
        sp: *mut sp_data,
        p: *mut sp_ptrack,
        ihopsize: ::std::os::raw::c_int,
        ipeaks: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_ptrack_compute(
        sp: *mut sp_data,
        p: *mut sp_ptrack,
        in_: *mut f32,
        freq: *mut f32,
        amp: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_randh {
    pub freq: f32,
    pub min: f32,
    pub max: f32,
    pub val: f32,
    pub counter: u32,
    pub dur: u32,
}
#[test]
fn bindgen_test_layout_sp_randh() {
    assert_eq!(
        ::std::mem::size_of::<sp_randh>(),
        24usize,
        concat!("Size of: ", stringify!(sp_randh))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_randh>(),
        4usize,
        concat!("Alignment of ", stringify!(sp_randh))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_randh>())).freq as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_randh),
            "::",
            stringify!(freq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_randh>())).min as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_randh),
            "::",
            stringify!(min)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_randh>())).max as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_randh),
            "::",
            stringify!(max)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_randh>())).val as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_randh),
            "::",
            stringify!(val)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_randh>())).counter as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_randh),
            "::",
            stringify!(counter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_randh>())).dur as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_randh),
            "::",
            stringify!(dur)
        )
    );
}
extern "C" {
    pub fn sp_randh_create(p: *mut *mut sp_randh) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_randh_destroy(p: *mut *mut sp_randh) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_randh_init(sp: *mut sp_data, p: *mut sp_randh) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_randh_compute(
        sp: *mut sp_data,
        p: *mut sp_randh,
        in_: *mut f32,
        out: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_randi {
    pub min: f32,
    pub max: f32,
    pub cps: f32,
    pub mode: f32,
    pub fstval: f32,
    pub cpscod: i16,
    pub phs: i32,
    pub num1: f32,
    pub num2: f32,
    pub dfdmax: f32,
    pub holdrand: ::std::os::raw::c_int,
    pub sicvt: f32,
}
#[test]
fn bindgen_test_layout_sp_randi() {
    assert_eq!(
        ::std::mem::size_of::<sp_randi>(),
        48usize,
        concat!("Size of: ", stringify!(sp_randi))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_randi>(),
        4usize,
        concat!("Alignment of ", stringify!(sp_randi))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_randi>())).min as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_randi),
            "::",
            stringify!(min)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_randi>())).max as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_randi),
            "::",
            stringify!(max)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_randi>())).cps as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_randi),
            "::",
            stringify!(cps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_randi>())).mode as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_randi),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_randi>())).fstval as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_randi),
            "::",
            stringify!(fstval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_randi>())).cpscod as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_randi),
            "::",
            stringify!(cpscod)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_randi>())).phs as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_randi),
            "::",
            stringify!(phs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_randi>())).num1 as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_randi),
            "::",
            stringify!(num1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_randi>())).num2 as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_randi),
            "::",
            stringify!(num2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_randi>())).dfdmax as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_randi),
            "::",
            stringify!(dfdmax)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_randi>())).holdrand as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_randi),
            "::",
            stringify!(holdrand)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_randi>())).sicvt as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_randi),
            "::",
            stringify!(sicvt)
        )
    );
}
extern "C" {
    pub fn sp_randi_create(p: *mut *mut sp_randi) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_randi_destroy(p: *mut *mut sp_randi) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_randi_init(sp: *mut sp_data, p: *mut sp_randi) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_randi_compute(
        sp: *mut sp_data,
        p: *mut sp_randi,
        in_: *mut f32,
        out: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sp_randmt {
    pub mti: ::std::os::raw::c_int,
    pub mt: [u32; 624usize],
}
#[test]
fn bindgen_test_layout_sp_randmt() {
    assert_eq!(
        ::std::mem::size_of::<sp_randmt>(),
        2500usize,
        concat!("Size of: ", stringify!(sp_randmt))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_randmt>(),
        4usize,
        concat!("Alignment of ", stringify!(sp_randmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_randmt>())).mti as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_randmt),
            "::",
            stringify!(mti)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_randmt>())).mt as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_randmt),
            "::",
            stringify!(mt)
        )
    );
}
extern "C" {
    pub fn sp_randmt_seed(p: *mut sp_randmt, initKey: *const u32, keyLength: u32);
}
extern "C" {
    pub fn sp_randmt_compute(p: *mut sp_randmt) -> u32;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_random {
    pub min: f32,
    pub max: f32,
}
#[test]
fn bindgen_test_layout_sp_random() {
    assert_eq!(
        ::std::mem::size_of::<sp_random>(),
        8usize,
        concat!("Size of: ", stringify!(sp_random))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_random>(),
        4usize,
        concat!("Alignment of ", stringify!(sp_random))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_random>())).min as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_random),
            "::",
            stringify!(min)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_random>())).max as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_random),
            "::",
            stringify!(max)
        )
    );
}
extern "C" {
    pub fn sp_random_create(p: *mut *mut sp_random) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_random_destroy(p: *mut *mut sp_random) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_random_init(sp: *mut sp_data, p: *mut sp_random) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_random_compute(
        sp: *mut sp_data,
        p: *mut sp_random,
        in_: *mut f32,
        out: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_reverse {
    pub delay: f32,
    pub bufpos: u32,
    pub bufsize: u32,
    pub buf: sp_auxdata,
}
#[test]
fn bindgen_test_layout_sp_reverse() {
    assert_eq!(
        ::std::mem::size_of::<sp_reverse>(),
        32usize,
        concat!("Size of: ", stringify!(sp_reverse))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_reverse>(),
        8usize,
        concat!("Alignment of ", stringify!(sp_reverse))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_reverse>())).delay as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_reverse),
            "::",
            stringify!(delay)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_reverse>())).bufpos as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_reverse),
            "::",
            stringify!(bufpos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_reverse>())).bufsize as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_reverse),
            "::",
            stringify!(bufsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_reverse>())).buf as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_reverse),
            "::",
            stringify!(buf)
        )
    );
}
extern "C" {
    pub fn sp_reverse_create(p: *mut *mut sp_reverse) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_reverse_destroy(p: *mut *mut sp_reverse) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_reverse_init(
        sp: *mut sp_data,
        p: *mut sp_reverse,
        delay: f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_reverse_compute(
        sp: *mut sp_data,
        p: *mut sp_reverse,
        in_: *mut f32,
        out: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_reson {
    pub freq: f32,
    pub bw: f32,
    pub scale: ::std::os::raw::c_int,
    pub c1: f32,
    pub c2: f32,
    pub c3: f32,
    pub yt1: f32,
    pub yt2: f32,
    pub cosf: f32,
    pub prvfreq: f32,
    pub prvbw: f32,
    pub tpidsr: f32,
}
#[test]
fn bindgen_test_layout_sp_reson() {
    assert_eq!(
        ::std::mem::size_of::<sp_reson>(),
        48usize,
        concat!("Size of: ", stringify!(sp_reson))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_reson>(),
        4usize,
        concat!("Alignment of ", stringify!(sp_reson))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_reson>())).freq as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_reson),
            "::",
            stringify!(freq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_reson>())).bw as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_reson),
            "::",
            stringify!(bw)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_reson>())).scale as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_reson),
            "::",
            stringify!(scale)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_reson>())).c1 as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_reson),
            "::",
            stringify!(c1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_reson>())).c2 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_reson),
            "::",
            stringify!(c2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_reson>())).c3 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_reson),
            "::",
            stringify!(c3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_reson>())).yt1 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_reson),
            "::",
            stringify!(yt1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_reson>())).yt2 as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_reson),
            "::",
            stringify!(yt2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_reson>())).cosf as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_reson),
            "::",
            stringify!(cosf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_reson>())).prvfreq as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_reson),
            "::",
            stringify!(prvfreq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_reson>())).prvbw as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_reson),
            "::",
            stringify!(prvbw)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_reson>())).tpidsr as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_reson),
            "::",
            stringify!(tpidsr)
        )
    );
}
extern "C" {
    pub fn sp_reson_create(p: *mut *mut sp_reson) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_reson_destroy(p: *mut *mut sp_reson) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_reson_init(sp: *mut sp_data, p: *mut sp_reson) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_reson_compute(
        sp: *mut sp_data,
        p: *mut sp_reson,
        in_: *mut f32,
        out: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_revsc_dl {
    pub writePos: ::std::os::raw::c_int,
    pub bufferSize: ::std::os::raw::c_int,
    pub readPos: ::std::os::raw::c_int,
    pub readPosFrac: ::std::os::raw::c_int,
    pub readPosFrac_inc: ::std::os::raw::c_int,
    pub dummy: ::std::os::raw::c_int,
    pub seedVal: ::std::os::raw::c_int,
    pub randLine_cnt: ::std::os::raw::c_int,
    pub filterState: f32,
    pub buf: *mut f32,
}
#[test]
fn bindgen_test_layout_sp_revsc_dl() {
    assert_eq!(
        ::std::mem::size_of::<sp_revsc_dl>(),
        48usize,
        concat!("Size of: ", stringify!(sp_revsc_dl))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_revsc_dl>(),
        8usize,
        concat!("Alignment of ", stringify!(sp_revsc_dl))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_revsc_dl>())).writePos as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_revsc_dl),
            "::",
            stringify!(writePos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_revsc_dl>())).bufferSize as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_revsc_dl),
            "::",
            stringify!(bufferSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_revsc_dl>())).readPos as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_revsc_dl),
            "::",
            stringify!(readPos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_revsc_dl>())).readPosFrac as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_revsc_dl),
            "::",
            stringify!(readPosFrac)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_revsc_dl>())).readPosFrac_inc as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_revsc_dl),
            "::",
            stringify!(readPosFrac_inc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_revsc_dl>())).dummy as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_revsc_dl),
            "::",
            stringify!(dummy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_revsc_dl>())).seedVal as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_revsc_dl),
            "::",
            stringify!(seedVal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_revsc_dl>())).randLine_cnt as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_revsc_dl),
            "::",
            stringify!(randLine_cnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_revsc_dl>())).filterState as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_revsc_dl),
            "::",
            stringify!(filterState)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_revsc_dl>())).buf as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_revsc_dl),
            "::",
            stringify!(buf)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_revsc {
    pub feedback: f32,
    pub lpfreq: f32,
    pub iSampleRate: f32,
    pub iPitchMod: f32,
    pub iSkipInit: f32,
    pub sampleRate: f32,
    pub dampFact: f32,
    pub prv_LPFreq: f32,
    pub initDone: ::std::os::raw::c_int,
    pub delayLines: [sp_revsc_dl; 8usize],
    pub aux: sp_auxdata,
}
#[test]
fn bindgen_test_layout_sp_revsc() {
    assert_eq!(
        ::std::mem::size_of::<sp_revsc>(),
        440usize,
        concat!("Size of: ", stringify!(sp_revsc))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_revsc>(),
        8usize,
        concat!("Alignment of ", stringify!(sp_revsc))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_revsc>())).feedback as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_revsc),
            "::",
            stringify!(feedback)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_revsc>())).lpfreq as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_revsc),
            "::",
            stringify!(lpfreq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_revsc>())).iSampleRate as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_revsc),
            "::",
            stringify!(iSampleRate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_revsc>())).iPitchMod as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_revsc),
            "::",
            stringify!(iPitchMod)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_revsc>())).iSkipInit as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_revsc),
            "::",
            stringify!(iSkipInit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_revsc>())).sampleRate as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_revsc),
            "::",
            stringify!(sampleRate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_revsc>())).dampFact as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_revsc),
            "::",
            stringify!(dampFact)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_revsc>())).prv_LPFreq as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_revsc),
            "::",
            stringify!(prv_LPFreq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_revsc>())).initDone as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_revsc),
            "::",
            stringify!(initDone)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_revsc>())).delayLines as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_revsc),
            "::",
            stringify!(delayLines)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_revsc>())).aux as *const _ as usize },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_revsc),
            "::",
            stringify!(aux)
        )
    );
}
extern "C" {
    pub fn sp_revsc_create(p: *mut *mut sp_revsc) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_revsc_destroy(p: *mut *mut sp_revsc) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_revsc_init(sp: *mut sp_data, p: *mut sp_revsc) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_revsc_compute(
        sp: *mut sp_data,
        p: *mut sp_revsc,
        in1: *mut f32,
        in2: *mut f32,
        out1: *mut f32,
        out2: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_rms {
    pub ihp: f32,
    pub istor: f32,
    pub c1: f32,
    pub c2: f32,
    pub prvq: f32,
}
#[test]
fn bindgen_test_layout_sp_rms() {
    assert_eq!(
        ::std::mem::size_of::<sp_rms>(),
        20usize,
        concat!("Size of: ", stringify!(sp_rms))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_rms>(),
        4usize,
        concat!("Alignment of ", stringify!(sp_rms))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_rms>())).ihp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_rms),
            "::",
            stringify!(ihp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_rms>())).istor as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_rms),
            "::",
            stringify!(istor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_rms>())).c1 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_rms),
            "::",
            stringify!(c1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_rms>())).c2 as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_rms),
            "::",
            stringify!(c2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_rms>())).prvq as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_rms),
            "::",
            stringify!(prvq)
        )
    );
}
extern "C" {
    pub fn sp_rms_create(p: *mut *mut sp_rms) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_rms_destroy(p: *mut *mut sp_rms) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_rms_init(sp: *mut sp_data, p: *mut sp_rms) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_rms_compute(
        sp: *mut sp_data,
        p: *mut sp_rms,
        in_: *mut f32,
        out: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_rpt {
    pub playpos: u32,
    pub bufpos: u32,
    pub running: ::std::os::raw::c_int,
    pub count: ::std::os::raw::c_int,
    pub reps: ::std::os::raw::c_int,
    pub sr: f32,
    pub size: u32,
    pub bpm: f32,
    pub div: ::std::os::raw::c_int,
    pub rep: ::std::os::raw::c_int,
    pub aux: sp_auxdata,
    pub rc: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sp_rpt() {
    assert_eq!(
        ::std::mem::size_of::<sp_rpt>(),
        64usize,
        concat!("Size of: ", stringify!(sp_rpt))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_rpt>(),
        8usize,
        concat!("Alignment of ", stringify!(sp_rpt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_rpt>())).playpos as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_rpt),
            "::",
            stringify!(playpos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_rpt>())).bufpos as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_rpt),
            "::",
            stringify!(bufpos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_rpt>())).running as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_rpt),
            "::",
            stringify!(running)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_rpt>())).count as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_rpt),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_rpt>())).reps as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_rpt),
            "::",
            stringify!(reps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_rpt>())).sr as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_rpt),
            "::",
            stringify!(sr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_rpt>())).size as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_rpt),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_rpt>())).bpm as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_rpt),
            "::",
            stringify!(bpm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_rpt>())).div as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_rpt),
            "::",
            stringify!(div)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_rpt>())).rep as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_rpt),
            "::",
            stringify!(rep)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_rpt>())).aux as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_rpt),
            "::",
            stringify!(aux)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_rpt>())).rc as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_rpt),
            "::",
            stringify!(rc)
        )
    );
}
extern "C" {
    pub fn sp_rpt_create(p: *mut *mut sp_rpt) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_rpt_destroy(p: *mut *mut sp_rpt) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_rpt_init(sp: *mut sp_data, p: *mut sp_rpt, maxdur: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_rpt_compute(
        sp: *mut sp_data,
        p: *mut sp_rpt,
        trig: *mut f32,
        in_: *mut f32,
        out: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_rspline {
    pub min: f32,
    pub max: f32,
    pub cps_min: f32,
    pub cps_max: f32,
    pub si: f32,
    pub phs: f32,
    pub rmin_cod: ::std::os::raw::c_int,
    pub rmax_cod: ::std::os::raw::c_int,
    pub num0: f32,
    pub num1: f32,
    pub num2: f32,
    pub df0: f32,
    pub df1: f32,
    pub c3: f32,
    pub c2: f32,
    pub onedsr: f32,
    pub holdrand: ::std::os::raw::c_int,
    pub init: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sp_rspline() {
    assert_eq!(
        ::std::mem::size_of::<sp_rspline>(),
        72usize,
        concat!("Size of: ", stringify!(sp_rspline))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_rspline>(),
        4usize,
        concat!("Alignment of ", stringify!(sp_rspline))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_rspline>())).min as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_rspline),
            "::",
            stringify!(min)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_rspline>())).max as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_rspline),
            "::",
            stringify!(max)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_rspline>())).cps_min as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_rspline),
            "::",
            stringify!(cps_min)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_rspline>())).cps_max as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_rspline),
            "::",
            stringify!(cps_max)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_rspline>())).si as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_rspline),
            "::",
            stringify!(si)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_rspline>())).phs as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_rspline),
            "::",
            stringify!(phs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_rspline>())).rmin_cod as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_rspline),
            "::",
            stringify!(rmin_cod)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_rspline>())).rmax_cod as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_rspline),
            "::",
            stringify!(rmax_cod)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_rspline>())).num0 as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_rspline),
            "::",
            stringify!(num0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_rspline>())).num1 as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_rspline),
            "::",
            stringify!(num1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_rspline>())).num2 as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_rspline),
            "::",
            stringify!(num2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_rspline>())).df0 as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_rspline),
            "::",
            stringify!(df0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_rspline>())).df1 as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_rspline),
            "::",
            stringify!(df1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_rspline>())).c3 as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_rspline),
            "::",
            stringify!(c3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_rspline>())).c2 as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_rspline),
            "::",
            stringify!(c2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_rspline>())).onedsr as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_rspline),
            "::",
            stringify!(onedsr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_rspline>())).holdrand as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_rspline),
            "::",
            stringify!(holdrand)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_rspline>())).init as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_rspline),
            "::",
            stringify!(init)
        )
    );
}
extern "C" {
    pub fn sp_rspline_create(p: *mut *mut sp_rspline) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_rspline_destroy(p: *mut *mut sp_rspline) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_rspline_init(sp: *mut sp_data, p: *mut sp_rspline) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_rspline_compute(
        sp: *mut sp_data,
        p: *mut sp_rspline,
        in_: *mut f32,
        out: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_saturator {
    pub drive: f32,
    pub dcoffset: f32,
    pub dcblocker: [[f32; 7usize]; 2usize],
    pub ai: [[f32; 7usize]; 6usize],
    pub aa: [[f32; 7usize]; 6usize],
}
#[test]
fn bindgen_test_layout_sp_saturator() {
    assert_eq!(
        ::std::mem::size_of::<sp_saturator>(),
        400usize,
        concat!("Size of: ", stringify!(sp_saturator))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_saturator>(),
        4usize,
        concat!("Alignment of ", stringify!(sp_saturator))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_saturator>())).drive as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_saturator),
            "::",
            stringify!(drive)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_saturator>())).dcoffset as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_saturator),
            "::",
            stringify!(dcoffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_saturator>())).dcblocker as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_saturator),
            "::",
            stringify!(dcblocker)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_saturator>())).ai as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_saturator),
            "::",
            stringify!(ai)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_saturator>())).aa as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_saturator),
            "::",
            stringify!(aa)
        )
    );
}
extern "C" {
    pub fn sp_saturator_create(p: *mut *mut sp_saturator) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_saturator_destroy(p: *mut *mut sp_saturator) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_saturator_init(sp: *mut sp_data, p: *mut sp_saturator) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_saturator_compute(
        sp: *mut sp_data,
        p: *mut sp_saturator,
        in_: *mut f32,
        out: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_samphold {
    pub val: f32,
}
#[test]
fn bindgen_test_layout_sp_samphold() {
    assert_eq!(
        ::std::mem::size_of::<sp_samphold>(),
        4usize,
        concat!("Size of: ", stringify!(sp_samphold))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_samphold>(),
        4usize,
        concat!("Alignment of ", stringify!(sp_samphold))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_samphold>())).val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_samphold),
            "::",
            stringify!(val)
        )
    );
}
extern "C" {
    pub fn sp_samphold_create(p: *mut *mut sp_samphold) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_samphold_destroy(p: *mut *mut sp_samphold) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_samphold_init(sp: *mut sp_data, p: *mut sp_samphold) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_samphold_compute(
        sp: *mut sp_data,
        p: *mut sp_samphold,
        trig: *mut f32,
        in_: *mut f32,
        out: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_scale {
    pub min: f32,
    pub max: f32,
}
#[test]
fn bindgen_test_layout_sp_scale() {
    assert_eq!(
        ::std::mem::size_of::<sp_scale>(),
        8usize,
        concat!("Size of: ", stringify!(sp_scale))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_scale>(),
        4usize,
        concat!("Alignment of ", stringify!(sp_scale))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_scale>())).min as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_scale),
            "::",
            stringify!(min)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_scale>())).max as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_scale),
            "::",
            stringify!(max)
        )
    );
}
extern "C" {
    pub fn sp_scale_create(p: *mut *mut sp_scale) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_scale_destroy(p: *mut *mut sp_scale) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_scale_init(sp: *mut sp_data, p: *mut sp_scale) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_scale_compute(
        sp: *mut sp_data,
        p: *mut sp_scale,
        in_: *mut f32,
        out: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_gen_scrambler(
        sp: *mut sp_data,
        src: *mut sp_ftbl,
        dest: *mut *mut sp_ftbl,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_sdelay {
    pub size: ::std::os::raw::c_int,
    pub pos: ::std::os::raw::c_int,
    pub buf: *mut f32,
}
#[test]
fn bindgen_test_layout_sp_sdelay() {
    assert_eq!(
        ::std::mem::size_of::<sp_sdelay>(),
        16usize,
        concat!("Size of: ", stringify!(sp_sdelay))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_sdelay>(),
        8usize,
        concat!("Alignment of ", stringify!(sp_sdelay))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_sdelay>())).size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_sdelay),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_sdelay>())).pos as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_sdelay),
            "::",
            stringify!(pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_sdelay>())).buf as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_sdelay),
            "::",
            stringify!(buf)
        )
    );
}
extern "C" {
    pub fn sp_sdelay_create(p: *mut *mut sp_sdelay) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_sdelay_destroy(p: *mut *mut sp_sdelay) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_sdelay_init(
        sp: *mut sp_data,
        p: *mut sp_sdelay,
        size: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_sdelay_compute(
        sp: *mut sp_data,
        p: *mut sp_sdelay,
        in_: *mut f32,
        out: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_slice {
    pub vals: *mut sp_ftbl,
    pub buf: *mut sp_ftbl,
    pub id: u32,
    pub pos: u32,
    pub nextpos: u32,
}
#[test]
fn bindgen_test_layout_sp_slice() {
    assert_eq!(
        ::std::mem::size_of::<sp_slice>(),
        32usize,
        concat!("Size of: ", stringify!(sp_slice))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_slice>(),
        8usize,
        concat!("Alignment of ", stringify!(sp_slice))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_slice>())).vals as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_slice),
            "::",
            stringify!(vals)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_slice>())).buf as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_slice),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_slice>())).id as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_slice),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_slice>())).pos as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_slice),
            "::",
            stringify!(pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_slice>())).nextpos as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_slice),
            "::",
            stringify!(nextpos)
        )
    );
}
extern "C" {
    pub fn sp_slice_create(p: *mut *mut sp_slice) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_slice_destroy(p: *mut *mut sp_slice) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_slice_init(
        sp: *mut sp_data,
        p: *mut sp_slice,
        vals: *mut sp_ftbl,
        buf: *mut sp_ftbl,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_slice_compute(
        sp: *mut sp_data,
        p: *mut sp_slice,
        in_: *mut f32,
        out: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_smoothdelay {
    pub del: f32,
    pub maxdel: f32,
    pub pdel: f32,
    pub sr: f32,
    pub feedback: f32,
    pub counter: ::std::os::raw::c_int,
    pub maxcount: ::std::os::raw::c_int,
    pub maxbuf: u32,
    pub buf1: sp_auxdata,
    pub bufpos1: u32,
    pub deltime1: u32,
    pub buf2: sp_auxdata,
    pub bufpos2: u32,
    pub deltime2: u32,
    pub curbuf: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sp_smoothdelay() {
    assert_eq!(
        ::std::mem::size_of::<sp_smoothdelay>(),
        88usize,
        concat!("Size of: ", stringify!(sp_smoothdelay))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_smoothdelay>(),
        8usize,
        concat!("Alignment of ", stringify!(sp_smoothdelay))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_smoothdelay>())).del as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_smoothdelay),
            "::",
            stringify!(del)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_smoothdelay>())).maxdel as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_smoothdelay),
            "::",
            stringify!(maxdel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_smoothdelay>())).pdel as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_smoothdelay),
            "::",
            stringify!(pdel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_smoothdelay>())).sr as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_smoothdelay),
            "::",
            stringify!(sr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_smoothdelay>())).feedback as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_smoothdelay),
            "::",
            stringify!(feedback)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_smoothdelay>())).counter as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_smoothdelay),
            "::",
            stringify!(counter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_smoothdelay>())).maxcount as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_smoothdelay),
            "::",
            stringify!(maxcount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_smoothdelay>())).maxbuf as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_smoothdelay),
            "::",
            stringify!(maxbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_smoothdelay>())).buf1 as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_smoothdelay),
            "::",
            stringify!(buf1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_smoothdelay>())).bufpos1 as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_smoothdelay),
            "::",
            stringify!(bufpos1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_smoothdelay>())).deltime1 as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_smoothdelay),
            "::",
            stringify!(deltime1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_smoothdelay>())).buf2 as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_smoothdelay),
            "::",
            stringify!(buf2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_smoothdelay>())).bufpos2 as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_smoothdelay),
            "::",
            stringify!(bufpos2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_smoothdelay>())).deltime2 as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_smoothdelay),
            "::",
            stringify!(deltime2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_smoothdelay>())).curbuf as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_smoothdelay),
            "::",
            stringify!(curbuf)
        )
    );
}
extern "C" {
    pub fn sp_smoothdelay_create(p: *mut *mut sp_smoothdelay) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_smoothdelay_destroy(p: *mut *mut sp_smoothdelay) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_smoothdelay_init(
        sp: *mut sp_data,
        p: *mut sp_smoothdelay,
        maxdel: f32,
        interp: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_smoothdelay_compute(
        sp: *mut sp_data,
        p: *mut sp_smoothdelay,
        in_: *mut f32,
        out: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_spa {
    pub buf: *mut f32,
    pub pos: u32,
    pub bufsize: u32,
    pub spa: sp_audio,
    pub aux: sp_auxdata,
}
#[test]
fn bindgen_test_layout_sp_spa() {
    assert_eq!(
        ::std::mem::size_of::<sp_spa>(),
        72usize,
        concat!("Size of: ", stringify!(sp_spa))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_spa>(),
        8usize,
        concat!("Alignment of ", stringify!(sp_spa))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_spa>())).buf as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_spa),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_spa>())).pos as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_spa),
            "::",
            stringify!(pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_spa>())).bufsize as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_spa),
            "::",
            stringify!(bufsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_spa>())).spa as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_spa),
            "::",
            stringify!(spa)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_spa>())).aux as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_spa),
            "::",
            stringify!(aux)
        )
    );
}
extern "C" {
    pub fn sp_spa_create(p: *mut *mut sp_spa) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_spa_destroy(p: *mut *mut sp_spa) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_spa_init(
        sp: *mut sp_data,
        p: *mut sp_spa,
        filename: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_spa_compute(
        sp: *mut sp_data,
        p: *mut sp_spa,
        in_: *mut f32,
        out: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_sparec {
    pub buf: *mut f32,
    pub pos: u32,
    pub bufsize: u32,
    pub spa: sp_audio,
    pub aux: sp_auxdata,
}
#[test]
fn bindgen_test_layout_sp_sparec() {
    assert_eq!(
        ::std::mem::size_of::<sp_sparec>(),
        72usize,
        concat!("Size of: ", stringify!(sp_sparec))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_sparec>(),
        8usize,
        concat!("Alignment of ", stringify!(sp_sparec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_sparec>())).buf as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_sparec),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_sparec>())).pos as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_sparec),
            "::",
            stringify!(pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_sparec>())).bufsize as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_sparec),
            "::",
            stringify!(bufsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_sparec>())).spa as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_sparec),
            "::",
            stringify!(spa)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_sparec>())).aux as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_sparec),
            "::",
            stringify!(aux)
        )
    );
}
extern "C" {
    pub fn sp_sparec_create(p: *mut *mut sp_sparec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_sparec_destroy(p: *mut *mut sp_sparec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_sparec_init(
        sp: *mut sp_data,
        p: *mut sp_sparec,
        filename: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_sparec_compute(
        sp: *mut sp_data,
        p: *mut sp_sparec,
        in_: *mut f32,
        out: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_sparec_close(sp: *mut sp_data, p: *mut sp_sparec) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_streson {
    pub freq: f32,
    pub fdbgain: f32,
    pub LPdelay: f32,
    pub APdelay: f32,
    pub Cdelay: *mut f32,
    pub buf: sp_auxdata,
    pub wpointer: ::std::os::raw::c_int,
    pub rpointer: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sp_streson() {
    assert_eq!(
        ::std::mem::size_of::<sp_streson>(),
        56usize,
        concat!("Size of: ", stringify!(sp_streson))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_streson>(),
        8usize,
        concat!("Alignment of ", stringify!(sp_streson))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_streson>())).freq as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_streson),
            "::",
            stringify!(freq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_streson>())).fdbgain as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_streson),
            "::",
            stringify!(fdbgain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_streson>())).LPdelay as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_streson),
            "::",
            stringify!(LPdelay)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_streson>())).APdelay as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_streson),
            "::",
            stringify!(APdelay)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_streson>())).Cdelay as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_streson),
            "::",
            stringify!(Cdelay)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_streson>())).buf as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_streson),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_streson>())).wpointer as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_streson),
            "::",
            stringify!(wpointer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_streson>())).rpointer as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_streson),
            "::",
            stringify!(rpointer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_streson>())).size as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_streson),
            "::",
            stringify!(size)
        )
    );
}
extern "C" {
    pub fn sp_streson_create(p: *mut *mut sp_streson) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_streson_destroy(p: *mut *mut sp_streson) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_streson_init(sp: *mut sp_data, p: *mut sp_streson) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_streson_compute(
        sp: *mut sp_data,
        p: *mut sp_streson,
        in_: *mut f32,
        out: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_switch {
    pub mode: f32,
}
#[test]
fn bindgen_test_layout_sp_switch() {
    assert_eq!(
        ::std::mem::size_of::<sp_switch>(),
        4usize,
        concat!("Size of: ", stringify!(sp_switch))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_switch>(),
        4usize,
        concat!("Alignment of ", stringify!(sp_switch))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_switch>())).mode as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_switch),
            "::",
            stringify!(mode)
        )
    );
}
extern "C" {
    pub fn sp_switch_create(p: *mut *mut sp_switch) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_switch_destroy(p: *mut *mut sp_switch) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_switch_init(sp: *mut sp_data, p: *mut sp_switch) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_switch_compute(
        sp: *mut sp_data,
        p: *mut sp_switch,
        trig: *mut f32,
        in1: *mut f32,
        in2: *mut f32,
        out: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_tabread {
    pub sig: f32,
    pub index: f32,
    pub mode: f32,
    pub offset: f32,
    pub wrap: f32,
    pub mul: f32,
    pub ft: *mut sp_ftbl,
}
#[test]
fn bindgen_test_layout_sp_tabread() {
    assert_eq!(
        ::std::mem::size_of::<sp_tabread>(),
        32usize,
        concat!("Size of: ", stringify!(sp_tabread))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_tabread>(),
        8usize,
        concat!("Alignment of ", stringify!(sp_tabread))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_tabread>())).sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_tabread),
            "::",
            stringify!(sig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_tabread>())).index as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_tabread),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_tabread>())).mode as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_tabread),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_tabread>())).offset as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_tabread),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_tabread>())).wrap as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_tabread),
            "::",
            stringify!(wrap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_tabread>())).mul as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_tabread),
            "::",
            stringify!(mul)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_tabread>())).ft as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_tabread),
            "::",
            stringify!(ft)
        )
    );
}
extern "C" {
    pub fn sp_tabread_create(p: *mut *mut sp_tabread) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_tabread_destroy(p: *mut *mut sp_tabread) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_tabread_init(
        sp: *mut sp_data,
        p: *mut sp_tabread,
        ft: *mut sp_ftbl,
        mode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_tabread_compute(
        sp: *mut sp_data,
        p: *mut sp_tabread,
        in_: *mut f32,
        out: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_tadsr {
    pub value: f32,
    pub target: f32,
    pub rate: f32,
    pub state: ::std::os::raw::c_int,
    pub attackRate: f32,
    pub decayRate: f32,
    pub sustainLevel: f32,
    pub releaseRate: f32,
    pub atk: f32,
    pub rel: f32,
    pub sus: f32,
    pub dec: f32,
    pub mode: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sp_tadsr() {
    assert_eq!(
        ::std::mem::size_of::<sp_tadsr>(),
        52usize,
        concat!("Size of: ", stringify!(sp_tadsr))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_tadsr>(),
        4usize,
        concat!("Alignment of ", stringify!(sp_tadsr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_tadsr>())).value as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_tadsr),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_tadsr>())).target as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_tadsr),
            "::",
            stringify!(target)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_tadsr>())).rate as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_tadsr),
            "::",
            stringify!(rate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_tadsr>())).state as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_tadsr),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_tadsr>())).attackRate as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_tadsr),
            "::",
            stringify!(attackRate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_tadsr>())).decayRate as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_tadsr),
            "::",
            stringify!(decayRate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_tadsr>())).sustainLevel as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_tadsr),
            "::",
            stringify!(sustainLevel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_tadsr>())).releaseRate as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_tadsr),
            "::",
            stringify!(releaseRate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_tadsr>())).atk as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_tadsr),
            "::",
            stringify!(atk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_tadsr>())).rel as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_tadsr),
            "::",
            stringify!(rel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_tadsr>())).sus as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_tadsr),
            "::",
            stringify!(sus)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_tadsr>())).dec as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_tadsr),
            "::",
            stringify!(dec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_tadsr>())).mode as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_tadsr),
            "::",
            stringify!(mode)
        )
    );
}
extern "C" {
    pub fn sp_tadsr_create(p: *mut *mut sp_tadsr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_tadsr_destroy(p: *mut *mut sp_tadsr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_tadsr_init(sp: *mut sp_data, p: *mut sp_tadsr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_tadsr_compute(
        sp: *mut sp_data,
        p: *mut sp_tadsr,
        trig: *mut f32,
        out: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sp_talkbox {
    pub quality: f32,
    pub d0: f32,
    pub d1: f32,
    pub d2: f32,
    pub d3: f32,
    pub d4: f32,
    pub u0: f32,
    pub u1: f32,
    pub u2: f32,
    pub u3: f32,
    pub u4: f32,
    pub FX: f32,
    pub emphasis: f32,
    pub car0: [f32; 1600usize],
    pub car1: [f32; 1600usize],
    pub window: [f32; 1600usize],
    pub buf0: [f32; 1600usize],
    pub buf1: [f32; 1600usize],
    pub K: u32,
    pub N: u32,
    pub O: u32,
    pub pos: u32,
}
#[test]
fn bindgen_test_layout_sp_talkbox() {
    assert_eq!(
        ::std::mem::size_of::<sp_talkbox>(),
        32068usize,
        concat!("Size of: ", stringify!(sp_talkbox))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_talkbox>(),
        4usize,
        concat!("Alignment of ", stringify!(sp_talkbox))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_talkbox>())).quality as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_talkbox),
            "::",
            stringify!(quality)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_talkbox>())).d0 as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_talkbox),
            "::",
            stringify!(d0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_talkbox>())).d1 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_talkbox),
            "::",
            stringify!(d1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_talkbox>())).d2 as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_talkbox),
            "::",
            stringify!(d2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_talkbox>())).d3 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_talkbox),
            "::",
            stringify!(d3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_talkbox>())).d4 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_talkbox),
            "::",
            stringify!(d4)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_talkbox>())).u0 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_talkbox),
            "::",
            stringify!(u0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_talkbox>())).u1 as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_talkbox),
            "::",
            stringify!(u1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_talkbox>())).u2 as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_talkbox),
            "::",
            stringify!(u2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_talkbox>())).u3 as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_talkbox),
            "::",
            stringify!(u3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_talkbox>())).u4 as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_talkbox),
            "::",
            stringify!(u4)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_talkbox>())).FX as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_talkbox),
            "::",
            stringify!(FX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_talkbox>())).emphasis as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_talkbox),
            "::",
            stringify!(emphasis)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_talkbox>())).car0 as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_talkbox),
            "::",
            stringify!(car0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_talkbox>())).car1 as *const _ as usize },
        6452usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_talkbox),
            "::",
            stringify!(car1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_talkbox>())).window as *const _ as usize },
        12852usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_talkbox),
            "::",
            stringify!(window)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_talkbox>())).buf0 as *const _ as usize },
        19252usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_talkbox),
            "::",
            stringify!(buf0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_talkbox>())).buf1 as *const _ as usize },
        25652usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_talkbox),
            "::",
            stringify!(buf1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_talkbox>())).K as *const _ as usize },
        32052usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_talkbox),
            "::",
            stringify!(K)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_talkbox>())).N as *const _ as usize },
        32056usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_talkbox),
            "::",
            stringify!(N)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_talkbox>())).O as *const _ as usize },
        32060usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_talkbox),
            "::",
            stringify!(O)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_talkbox>())).pos as *const _ as usize },
        32064usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_talkbox),
            "::",
            stringify!(pos)
        )
    );
}
extern "C" {
    pub fn sp_talkbox_create(p: *mut *mut sp_talkbox) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_talkbox_destroy(p: *mut *mut sp_talkbox) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_talkbox_init(sp: *mut sp_data, p: *mut sp_talkbox) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_talkbox_compute(
        sp: *mut sp_data,
        p: *mut sp_talkbox,
        src: *mut f32,
        exc: *mut f32,
        out: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_tblrec {
    pub ft: *mut sp_ftbl,
    pub index: u32,
    pub record: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sp_tblrec() {
    assert_eq!(
        ::std::mem::size_of::<sp_tblrec>(),
        16usize,
        concat!("Size of: ", stringify!(sp_tblrec))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_tblrec>(),
        8usize,
        concat!("Alignment of ", stringify!(sp_tblrec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_tblrec>())).ft as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_tblrec),
            "::",
            stringify!(ft)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_tblrec>())).index as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_tblrec),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_tblrec>())).record as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_tblrec),
            "::",
            stringify!(record)
        )
    );
}
extern "C" {
    pub fn sp_tblrec_create(p: *mut *mut sp_tblrec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_tblrec_destroy(p: *mut *mut sp_tblrec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_tblrec_init(
        sp: *mut sp_data,
        p: *mut sp_tblrec,
        ft: *mut sp_ftbl,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_tblrec_compute(
        sp: *mut sp_data,
        p: *mut sp_tblrec,
        in_: *mut f32,
        trig: *mut f32,
        out: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_tbvcf {
    pub fco: f32,
    pub res: f32,
    pub dist: f32,
    pub asym: f32,
    pub iskip: f32,
    pub y: f32,
    pub y1: f32,
    pub y2: f32,
    pub fcocod: ::std::os::raw::c_int,
    pub rezcod: ::std::os::raw::c_int,
    pub sr: f32,
    pub onedsr: f32,
}
#[test]
fn bindgen_test_layout_sp_tbvcf() {
    assert_eq!(
        ::std::mem::size_of::<sp_tbvcf>(),
        48usize,
        concat!("Size of: ", stringify!(sp_tbvcf))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_tbvcf>(),
        4usize,
        concat!("Alignment of ", stringify!(sp_tbvcf))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_tbvcf>())).fco as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_tbvcf),
            "::",
            stringify!(fco)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_tbvcf>())).res as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_tbvcf),
            "::",
            stringify!(res)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_tbvcf>())).dist as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_tbvcf),
            "::",
            stringify!(dist)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_tbvcf>())).asym as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_tbvcf),
            "::",
            stringify!(asym)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_tbvcf>())).iskip as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_tbvcf),
            "::",
            stringify!(iskip)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_tbvcf>())).y as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_tbvcf),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_tbvcf>())).y1 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_tbvcf),
            "::",
            stringify!(y1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_tbvcf>())).y2 as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_tbvcf),
            "::",
            stringify!(y2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_tbvcf>())).fcocod as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_tbvcf),
            "::",
            stringify!(fcocod)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_tbvcf>())).rezcod as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_tbvcf),
            "::",
            stringify!(rezcod)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_tbvcf>())).sr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_tbvcf),
            "::",
            stringify!(sr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_tbvcf>())).onedsr as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_tbvcf),
            "::",
            stringify!(onedsr)
        )
    );
}
extern "C" {
    pub fn sp_tbvcf_create(p: *mut *mut sp_tbvcf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_tbvcf_destroy(p: *mut *mut sp_tbvcf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_tbvcf_init(sp: *mut sp_data, p: *mut sp_tbvcf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_tbvcf_compute(
        sp: *mut sp_data,
        p: *mut sp_tbvcf,
        in_: *mut f32,
        out: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_tdiv {
    pub num: u32,
    pub counter: u32,
    pub offset: u32,
}
#[test]
fn bindgen_test_layout_sp_tdiv() {
    assert_eq!(
        ::std::mem::size_of::<sp_tdiv>(),
        12usize,
        concat!("Size of: ", stringify!(sp_tdiv))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_tdiv>(),
        4usize,
        concat!("Alignment of ", stringify!(sp_tdiv))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_tdiv>())).num as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_tdiv),
            "::",
            stringify!(num)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_tdiv>())).counter as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_tdiv),
            "::",
            stringify!(counter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_tdiv>())).offset as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_tdiv),
            "::",
            stringify!(offset)
        )
    );
}
extern "C" {
    pub fn sp_tdiv_create(p: *mut *mut sp_tdiv) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_tdiv_destroy(p: *mut *mut sp_tdiv) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_tdiv_init(sp: *mut sp_data, p: *mut sp_tdiv) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_tdiv_compute(
        sp: *mut sp_data,
        p: *mut sp_tdiv,
        in_: *mut f32,
        out: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_tenv {
    pub te: *mut sp_tevent,
    pub pos: u32,
    pub atk_end: u32,
    pub rel_start: u32,
    pub sr: u32,
    pub totaldur: u32,
    pub atk: f32,
    pub rel: f32,
    pub hold: f32,
    pub atk_slp: f32,
    pub rel_slp: f32,
    pub last: f32,
    pub sigmode: ::std::os::raw::c_int,
    pub input: f32,
}
#[test]
fn bindgen_test_layout_sp_tenv() {
    assert_eq!(
        ::std::mem::size_of::<sp_tenv>(),
        64usize,
        concat!("Size of: ", stringify!(sp_tenv))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_tenv>(),
        8usize,
        concat!("Alignment of ", stringify!(sp_tenv))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_tenv>())).te as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_tenv),
            "::",
            stringify!(te)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_tenv>())).pos as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_tenv),
            "::",
            stringify!(pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_tenv>())).atk_end as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_tenv),
            "::",
            stringify!(atk_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_tenv>())).rel_start as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_tenv),
            "::",
            stringify!(rel_start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_tenv>())).sr as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_tenv),
            "::",
            stringify!(sr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_tenv>())).totaldur as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_tenv),
            "::",
            stringify!(totaldur)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_tenv>())).atk as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_tenv),
            "::",
            stringify!(atk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_tenv>())).rel as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_tenv),
            "::",
            stringify!(rel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_tenv>())).hold as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_tenv),
            "::",
            stringify!(hold)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_tenv>())).atk_slp as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_tenv),
            "::",
            stringify!(atk_slp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_tenv>())).rel_slp as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_tenv),
            "::",
            stringify!(rel_slp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_tenv>())).last as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_tenv),
            "::",
            stringify!(last)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_tenv>())).sigmode as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_tenv),
            "::",
            stringify!(sigmode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_tenv>())).input as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_tenv),
            "::",
            stringify!(input)
        )
    );
}
extern "C" {
    pub fn sp_tenv_create(p: *mut *mut sp_tenv) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_tenv_destroy(p: *mut *mut sp_tenv) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_tenv_init(sp: *mut sp_data, p: *mut sp_tenv) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_tenv_compute(
        sp: *mut sp_data,
        p: *mut sp_tenv,
        in_: *mut f32,
        out: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_tenv2 {
    pub state: ::std::os::raw::c_int,
    pub atk: f32,
    pub rel: f32,
    pub totaltime: u32,
    pub timer: u32,
    pub slope: f32,
    pub last: f32,
}
#[test]
fn bindgen_test_layout_sp_tenv2() {
    assert_eq!(
        ::std::mem::size_of::<sp_tenv2>(),
        28usize,
        concat!("Size of: ", stringify!(sp_tenv2))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_tenv2>(),
        4usize,
        concat!("Alignment of ", stringify!(sp_tenv2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_tenv2>())).state as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_tenv2),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_tenv2>())).atk as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_tenv2),
            "::",
            stringify!(atk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_tenv2>())).rel as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_tenv2),
            "::",
            stringify!(rel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_tenv2>())).totaltime as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_tenv2),
            "::",
            stringify!(totaltime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_tenv2>())).timer as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_tenv2),
            "::",
            stringify!(timer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_tenv2>())).slope as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_tenv2),
            "::",
            stringify!(slope)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_tenv2>())).last as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_tenv2),
            "::",
            stringify!(last)
        )
    );
}
extern "C" {
    pub fn sp_tenv2_create(p: *mut *mut sp_tenv2) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_tenv2_destroy(p: *mut *mut sp_tenv2) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_tenv2_init(sp: *mut sp_data, p: *mut sp_tenv2) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_tenv2_compute(
        sp: *mut sp_data,
        p: *mut sp_tenv2,
        in_: *mut f32,
        out: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_tenvx {
    pub atk: f32,
    pub rel: f32,
    pub hold: f32,
    pub patk: f32,
    pub prel: f32,
    pub count: u32,
    pub a_a: f32,
    pub b_a: f32,
    pub a_r: f32,
    pub b_r: f32,
    pub y: f32,
}
#[test]
fn bindgen_test_layout_sp_tenvx() {
    assert_eq!(
        ::std::mem::size_of::<sp_tenvx>(),
        44usize,
        concat!("Size of: ", stringify!(sp_tenvx))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_tenvx>(),
        4usize,
        concat!("Alignment of ", stringify!(sp_tenvx))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_tenvx>())).atk as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_tenvx),
            "::",
            stringify!(atk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_tenvx>())).rel as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_tenvx),
            "::",
            stringify!(rel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_tenvx>())).hold as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_tenvx),
            "::",
            stringify!(hold)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_tenvx>())).patk as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_tenvx),
            "::",
            stringify!(patk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_tenvx>())).prel as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_tenvx),
            "::",
            stringify!(prel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_tenvx>())).count as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_tenvx),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_tenvx>())).a_a as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_tenvx),
            "::",
            stringify!(a_a)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_tenvx>())).b_a as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_tenvx),
            "::",
            stringify!(b_a)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_tenvx>())).a_r as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_tenvx),
            "::",
            stringify!(a_r)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_tenvx>())).b_r as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_tenvx),
            "::",
            stringify!(b_r)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_tenvx>())).y as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_tenvx),
            "::",
            stringify!(y)
        )
    );
}
extern "C" {
    pub fn sp_tenvx_create(p: *mut *mut sp_tenvx) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_tenvx_destroy(p: *mut *mut sp_tenvx) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_tenvx_init(sp: *mut sp_data, p: *mut sp_tenvx) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_tenvx_compute(
        sp: *mut sp_data,
        p: *mut sp_tenvx,
        in_: *mut f32,
        out: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_tgate {
    pub time: f32,
    pub timer: u32,
}
#[test]
fn bindgen_test_layout_sp_tgate() {
    assert_eq!(
        ::std::mem::size_of::<sp_tgate>(),
        8usize,
        concat!("Size of: ", stringify!(sp_tgate))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_tgate>(),
        4usize,
        concat!("Alignment of ", stringify!(sp_tgate))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_tgate>())).time as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_tgate),
            "::",
            stringify!(time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_tgate>())).timer as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_tgate),
            "::",
            stringify!(timer)
        )
    );
}
extern "C" {
    pub fn sp_tgate_create(p: *mut *mut sp_tgate) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_tgate_destroy(p: *mut *mut sp_tgate) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_tgate_init(sp: *mut sp_data, p: *mut sp_tgate) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_tgate_compute(
        sp: *mut sp_data,
        p: *mut sp_tgate,
        in_: *mut f32,
        out: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_thresh {
    pub init: ::std::os::raw::c_int,
    pub prev: f32,
    pub thresh: f32,
    pub mode: f32,
}
#[test]
fn bindgen_test_layout_sp_thresh() {
    assert_eq!(
        ::std::mem::size_of::<sp_thresh>(),
        16usize,
        concat!("Size of: ", stringify!(sp_thresh))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_thresh>(),
        4usize,
        concat!("Alignment of ", stringify!(sp_thresh))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_thresh>())).init as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_thresh),
            "::",
            stringify!(init)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_thresh>())).prev as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_thresh),
            "::",
            stringify!(prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_thresh>())).thresh as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_thresh),
            "::",
            stringify!(thresh)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_thresh>())).mode as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_thresh),
            "::",
            stringify!(mode)
        )
    );
}
extern "C" {
    pub fn sp_thresh_create(p: *mut *mut sp_thresh) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_thresh_destroy(p: *mut *mut sp_thresh) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_thresh_init(sp: *mut sp_data, p: *mut sp_thresh) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_thresh_compute(
        sp: *mut sp_data,
        p: *mut sp_thresh,
        in_: *mut f32,
        out: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_timer {
    pub mode: ::std::os::raw::c_int,
    pub pos: u32,
    pub time: f32,
}
#[test]
fn bindgen_test_layout_sp_timer() {
    assert_eq!(
        ::std::mem::size_of::<sp_timer>(),
        12usize,
        concat!("Size of: ", stringify!(sp_timer))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_timer>(),
        4usize,
        concat!("Alignment of ", stringify!(sp_timer))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_timer>())).mode as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_timer),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_timer>())).pos as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_timer),
            "::",
            stringify!(pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_timer>())).time as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_timer),
            "::",
            stringify!(time)
        )
    );
}
extern "C" {
    pub fn sp_timer_create(p: *mut *mut sp_timer) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_timer_destroy(p: *mut *mut sp_timer) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_timer_init(sp: *mut sp_data, p: *mut sp_timer) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_timer_compute(
        sp: *mut sp_data,
        p: *mut sp_timer,
        in_: *mut f32,
        out: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_tin {
    pub fp: *mut FILE,
    pub val: f32,
}
#[test]
fn bindgen_test_layout_sp_tin() {
    assert_eq!(
        ::std::mem::size_of::<sp_tin>(),
        16usize,
        concat!("Size of: ", stringify!(sp_tin))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_tin>(),
        8usize,
        concat!("Alignment of ", stringify!(sp_tin))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_tin>())).fp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_tin),
            "::",
            stringify!(fp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_tin>())).val as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_tin),
            "::",
            stringify!(val)
        )
    );
}
extern "C" {
    pub fn sp_tin_create(p: *mut *mut sp_tin) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_tin_destroy(p: *mut *mut sp_tin) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_tin_init(sp: *mut sp_data, p: *mut sp_tin) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_tin_compute(
        sp: *mut sp_data,
        p: *mut sp_tin,
        in_: *mut f32,
        out: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_tone {
    pub hp: f32,
    pub c1: f32,
    pub c2: f32,
    pub yt1: f32,
    pub prvhp: f32,
    pub tpidsr: f32,
}
#[test]
fn bindgen_test_layout_sp_tone() {
    assert_eq!(
        ::std::mem::size_of::<sp_tone>(),
        24usize,
        concat!("Size of: ", stringify!(sp_tone))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_tone>(),
        4usize,
        concat!("Alignment of ", stringify!(sp_tone))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_tone>())).hp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_tone),
            "::",
            stringify!(hp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_tone>())).c1 as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_tone),
            "::",
            stringify!(c1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_tone>())).c2 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_tone),
            "::",
            stringify!(c2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_tone>())).yt1 as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_tone),
            "::",
            stringify!(yt1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_tone>())).prvhp as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_tone),
            "::",
            stringify!(prvhp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_tone>())).tpidsr as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_tone),
            "::",
            stringify!(tpidsr)
        )
    );
}
extern "C" {
    pub fn sp_tone_create(t: *mut *mut sp_tone) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_tone_destroy(t: *mut *mut sp_tone) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_tone_init(sp: *mut sp_data, t: *mut sp_tone) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_tone_compute(
        sp: *mut sp_data,
        t: *mut sp_tone,
        in_: *mut f32,
        out: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_trand {
    pub min: f32,
    pub max: f32,
    pub val: f32,
}
#[test]
fn bindgen_test_layout_sp_trand() {
    assert_eq!(
        ::std::mem::size_of::<sp_trand>(),
        12usize,
        concat!("Size of: ", stringify!(sp_trand))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_trand>(),
        4usize,
        concat!("Alignment of ", stringify!(sp_trand))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_trand>())).min as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_trand),
            "::",
            stringify!(min)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_trand>())).max as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_trand),
            "::",
            stringify!(max)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_trand>())).val as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_trand),
            "::",
            stringify!(val)
        )
    );
}
extern "C" {
    pub fn sp_trand_create(p: *mut *mut sp_trand) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_trand_destroy(p: *mut *mut sp_trand) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_trand_init(sp: *mut sp_data, p: *mut sp_trand) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_trand_compute(
        sp: *mut sp_data,
        p: *mut sp_trand,
        in_: *mut f32,
        out: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_tseg {
    pub beg: f32,
    pub dur: f32,
    pub end: f32,
    pub steps: u32,
    pub count: u32,
    pub val: f32,
    pub type_: f32,
    pub slope: f32,
    pub tdivnsteps: f32,
}
#[test]
fn bindgen_test_layout_sp_tseg() {
    assert_eq!(
        ::std::mem::size_of::<sp_tseg>(),
        36usize,
        concat!("Size of: ", stringify!(sp_tseg))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_tseg>(),
        4usize,
        concat!("Alignment of ", stringify!(sp_tseg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_tseg>())).beg as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_tseg),
            "::",
            stringify!(beg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_tseg>())).dur as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_tseg),
            "::",
            stringify!(dur)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_tseg>())).end as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_tseg),
            "::",
            stringify!(end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_tseg>())).steps as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_tseg),
            "::",
            stringify!(steps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_tseg>())).count as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_tseg),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_tseg>())).val as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_tseg),
            "::",
            stringify!(val)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_tseg>())).type_ as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_tseg),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_tseg>())).slope as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_tseg),
            "::",
            stringify!(slope)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_tseg>())).tdivnsteps as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_tseg),
            "::",
            stringify!(tdivnsteps)
        )
    );
}
extern "C" {
    pub fn sp_tseg_create(p: *mut *mut sp_tseg) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_tseg_destroy(p: *mut *mut sp_tseg) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_tseg_init(sp: *mut sp_data, p: *mut sp_tseg, ibeg: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_tseg_compute(
        sp: *mut sp_data,
        p: *mut sp_tseg,
        in_: *mut f32,
        out: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_tseq {
    pub ft: *mut sp_ftbl,
    pub val: f32,
    pub pos: i32,
    pub shuf: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sp_tseq() {
    assert_eq!(
        ::std::mem::size_of::<sp_tseq>(),
        24usize,
        concat!("Size of: ", stringify!(sp_tseq))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_tseq>(),
        8usize,
        concat!("Alignment of ", stringify!(sp_tseq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_tseq>())).ft as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_tseq),
            "::",
            stringify!(ft)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_tseq>())).val as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_tseq),
            "::",
            stringify!(val)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_tseq>())).pos as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_tseq),
            "::",
            stringify!(pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_tseq>())).shuf as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_tseq),
            "::",
            stringify!(shuf)
        )
    );
}
extern "C" {
    pub fn sp_tseq_create(p: *mut *mut sp_tseq) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_tseq_destroy(p: *mut *mut sp_tseq) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_tseq_init(
        sp: *mut sp_data,
        p: *mut sp_tseq,
        ft: *mut sp_ftbl,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_tseq_compute(
        sp: *mut sp_data,
        p: *mut sp_tseq,
        trig: *mut f32,
        val: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_vdelay {
    pub del: f32,
    pub maxdel: f32,
    pub feedback: f32,
    pub prev: f32,
    pub sr: f32,
    pub buf: sp_auxdata,
    pub left: i32,
}
#[test]
fn bindgen_test_layout_sp_vdelay() {
    assert_eq!(
        ::std::mem::size_of::<sp_vdelay>(),
        48usize,
        concat!("Size of: ", stringify!(sp_vdelay))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_vdelay>(),
        8usize,
        concat!("Alignment of ", stringify!(sp_vdelay))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_vdelay>())).del as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_vdelay),
            "::",
            stringify!(del)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_vdelay>())).maxdel as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_vdelay),
            "::",
            stringify!(maxdel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_vdelay>())).feedback as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_vdelay),
            "::",
            stringify!(feedback)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_vdelay>())).prev as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_vdelay),
            "::",
            stringify!(prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_vdelay>())).sr as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_vdelay),
            "::",
            stringify!(sr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_vdelay>())).buf as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_vdelay),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_vdelay>())).left as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_vdelay),
            "::",
            stringify!(left)
        )
    );
}
extern "C" {
    pub fn sp_vdelay_create(p: *mut *mut sp_vdelay) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_vdelay_destroy(p: *mut *mut sp_vdelay) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_vdelay_init(
        sp: *mut sp_data,
        p: *mut sp_vdelay,
        maxdel: f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_vdelay_compute(
        sp: *mut sp_data,
        p: *mut sp_vdelay,
        in_: *mut f32,
        out: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_vdelay_reset(sp: *mut sp_data, p: *mut sp_vdelay) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_voc {
    _unused: [u8; 0],
}
extern "C" {
    pub fn sp_voc_create(voc: *mut *mut sp_voc) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_voc_destroy(voc: *mut *mut sp_voc) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_voc_init(sp: *mut sp_data, voc: *mut sp_voc) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_voc_compute(
        sp: *mut sp_data,
        voc: *mut sp_voc,
        out: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_voc_tract_compute(
        sp: *mut sp_data,
        voc: *mut sp_voc,
        in_: *mut f32,
        out: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_voc_set_frequency(voc: *mut sp_voc, freq: f32);
}
extern "C" {
    pub fn sp_voc_get_frequency_ptr(voc: *mut sp_voc) -> *mut f32;
}
extern "C" {
    pub fn sp_voc_get_tract_diameters(voc: *mut sp_voc) -> *mut f32;
}
extern "C" {
    pub fn sp_voc_get_current_tract_diameters(voc: *mut sp_voc) -> *mut f32;
}
extern "C" {
    pub fn sp_voc_get_tract_size(voc: *mut sp_voc) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_voc_get_nose_diameters(voc: *mut sp_voc) -> *mut f32;
}
extern "C" {
    pub fn sp_voc_get_nose_size(voc: *mut sp_voc) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_voc_set_tongue_shape(voc: *mut sp_voc, tongue_index: f32, tongue_diameter: f32);
}
extern "C" {
    pub fn sp_voc_set_tenseness(voc: *mut sp_voc, breathiness: f32);
}
extern "C" {
    pub fn sp_voc_get_tenseness_ptr(voc: *mut sp_voc) -> *mut f32;
}
extern "C" {
    pub fn sp_voc_set_velum(voc: *mut sp_voc, velum: f32);
}
extern "C" {
    pub fn sp_voc_get_velum_ptr(voc: *mut sp_voc) -> *mut f32;
}
extern "C" {
    pub fn sp_voc_set_diameters(
        voc: *mut sp_voc,
        blade_start: ::std::os::raw::c_int,
        lip_start: ::std::os::raw::c_int,
        tip_start: ::std::os::raw::c_int,
        tongue_index: f32,
        tongue_diameter: f32,
        diameters: *mut f32,
    );
}
extern "C" {
    pub fn sp_voc_get_counter(voc: *mut sp_voc) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_vocoder {
    pub faust: *mut ::std::os::raw::c_void,
    pub argpos: ::std::os::raw::c_int,
    pub args: [*mut f32; 3usize],
    pub atk: *mut f32,
    pub rel: *mut f32,
    pub bwratio: *mut f32,
}
#[test]
fn bindgen_test_layout_sp_vocoder() {
    assert_eq!(
        ::std::mem::size_of::<sp_vocoder>(),
        64usize,
        concat!("Size of: ", stringify!(sp_vocoder))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_vocoder>(),
        8usize,
        concat!("Alignment of ", stringify!(sp_vocoder))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_vocoder>())).faust as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_vocoder),
            "::",
            stringify!(faust)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_vocoder>())).argpos as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_vocoder),
            "::",
            stringify!(argpos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_vocoder>())).args as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_vocoder),
            "::",
            stringify!(args)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_vocoder>())).atk as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_vocoder),
            "::",
            stringify!(atk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_vocoder>())).rel as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_vocoder),
            "::",
            stringify!(rel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_vocoder>())).bwratio as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_vocoder),
            "::",
            stringify!(bwratio)
        )
    );
}
extern "C" {
    pub fn sp_vocoder_create(p: *mut *mut sp_vocoder) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_vocoder_destroy(p: *mut *mut sp_vocoder) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_vocoder_init(sp: *mut sp_data, p: *mut sp_vocoder) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_vocoder_compute(
        sp: *mut sp_data,
        p: *mut sp_vocoder,
        source: *mut f32,
        excite: *mut f32,
        out: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_waveset {
    pub rep: f32,
    pub len: f32,
    pub auxch: sp_auxdata,
    pub length: i32,
    pub cnt: i32,
    pub start: i32,
    pub current: i32,
    pub direction: i32,
    pub end: i32,
    pub lastsamp: f32,
    pub noinsert: i32,
}
#[test]
fn bindgen_test_layout_sp_waveset() {
    assert_eq!(
        ::std::mem::size_of::<sp_waveset>(),
        56usize,
        concat!("Size of: ", stringify!(sp_waveset))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_waveset>(),
        8usize,
        concat!("Alignment of ", stringify!(sp_waveset))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_waveset>())).rep as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_waveset),
            "::",
            stringify!(rep)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_waveset>())).len as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_waveset),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_waveset>())).auxch as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_waveset),
            "::",
            stringify!(auxch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_waveset>())).length as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_waveset),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_waveset>())).cnt as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_waveset),
            "::",
            stringify!(cnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_waveset>())).start as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_waveset),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_waveset>())).current as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_waveset),
            "::",
            stringify!(current)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_waveset>())).direction as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_waveset),
            "::",
            stringify!(direction)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_waveset>())).end as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_waveset),
            "::",
            stringify!(end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_waveset>())).lastsamp as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_waveset),
            "::",
            stringify!(lastsamp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_waveset>())).noinsert as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_waveset),
            "::",
            stringify!(noinsert)
        )
    );
}
extern "C" {
    pub fn sp_waveset_create(p: *mut *mut sp_waveset) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_waveset_destroy(p: *mut *mut sp_waveset) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_waveset_init(
        sp: *mut sp_data,
        p: *mut sp_waveset,
        ilen: f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_waveset_compute(
        sp: *mut sp_data,
        p: *mut sp_waveset,
        in_: *mut f32,
        out: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_wavin {
    _unused: [u8; 0],
}
extern "C" {
    pub fn sp_wavin_create(p: *mut *mut sp_wavin) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_wavin_destroy(p: *mut *mut sp_wavin) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_wavin_init(
        sp: *mut sp_data,
        p: *mut sp_wavin,
        filename: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_wavin_compute(
        sp: *mut sp_data,
        p: *mut sp_wavin,
        in_: *mut f32,
        out: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_wavout {
    _unused: [u8; 0],
}
extern "C" {
    pub fn sp_wavout_create(p: *mut *mut sp_wavout) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_wavout_destroy(p: *mut *mut sp_wavout) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_wavout_init(
        sp: *mut sp_data,
        p: *mut sp_wavout,
        filename: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_wavout_compute(
        sp: *mut sp_data,
        p: *mut sp_wavout,
        in_: *mut f32,
        out: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_wpkorg35 {
    pub lpf1_a: f32,
    pub lpf1_z: f32,
    pub lpf2_a: f32,
    pub lpf2_b: f32,
    pub lpf2_z: f32,
    pub hpf_a: f32,
    pub hpf_b: f32,
    pub hpf_z: f32,
    pub alpha: f32,
    pub cutoff: f32,
    pub res: f32,
    pub saturation: f32,
    pub pcutoff: f32,
    pub pres: f32,
    pub nonlinear: u32,
}
#[test]
fn bindgen_test_layout_sp_wpkorg35() {
    assert_eq!(
        ::std::mem::size_of::<sp_wpkorg35>(),
        60usize,
        concat!("Size of: ", stringify!(sp_wpkorg35))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_wpkorg35>(),
        4usize,
        concat!("Alignment of ", stringify!(sp_wpkorg35))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_wpkorg35>())).lpf1_a as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_wpkorg35),
            "::",
            stringify!(lpf1_a)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_wpkorg35>())).lpf1_z as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_wpkorg35),
            "::",
            stringify!(lpf1_z)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_wpkorg35>())).lpf2_a as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_wpkorg35),
            "::",
            stringify!(lpf2_a)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_wpkorg35>())).lpf2_b as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_wpkorg35),
            "::",
            stringify!(lpf2_b)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_wpkorg35>())).lpf2_z as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_wpkorg35),
            "::",
            stringify!(lpf2_z)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_wpkorg35>())).hpf_a as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_wpkorg35),
            "::",
            stringify!(hpf_a)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_wpkorg35>())).hpf_b as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_wpkorg35),
            "::",
            stringify!(hpf_b)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_wpkorg35>())).hpf_z as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_wpkorg35),
            "::",
            stringify!(hpf_z)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_wpkorg35>())).alpha as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_wpkorg35),
            "::",
            stringify!(alpha)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_wpkorg35>())).cutoff as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_wpkorg35),
            "::",
            stringify!(cutoff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_wpkorg35>())).res as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_wpkorg35),
            "::",
            stringify!(res)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_wpkorg35>())).saturation as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_wpkorg35),
            "::",
            stringify!(saturation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_wpkorg35>())).pcutoff as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_wpkorg35),
            "::",
            stringify!(pcutoff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_wpkorg35>())).pres as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_wpkorg35),
            "::",
            stringify!(pres)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_wpkorg35>())).nonlinear as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_wpkorg35),
            "::",
            stringify!(nonlinear)
        )
    );
}
extern "C" {
    pub fn sp_wpkorg35_create(p: *mut *mut sp_wpkorg35) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_wpkorg35_destroy(p: *mut *mut sp_wpkorg35) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_wpkorg35_init(sp: *mut sp_data, p: *mut sp_wpkorg35) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_wpkorg35_compute(
        sp: *mut sp_data,
        p: *mut sp_wpkorg35,
        in_: *mut f32,
        out: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_zitarev {
    pub faust: *mut ::std::os::raw::c_void,
    pub argpos: ::std::os::raw::c_int,
    pub args: [*mut f32; 11usize],
    pub in_delay: *mut f32,
    pub lf_x: *mut f32,
    pub rt60_low: *mut f32,
    pub rt60_mid: *mut f32,
    pub hf_damping: *mut f32,
    pub eq1_freq: *mut f32,
    pub eq1_level: *mut f32,
    pub eq2_freq: *mut f32,
    pub eq2_level: *mut f32,
    pub mix: *mut f32,
    pub level: *mut f32,
}
#[test]
fn bindgen_test_layout_sp_zitarev() {
    assert_eq!(
        ::std::mem::size_of::<sp_zitarev>(),
        192usize,
        concat!("Size of: ", stringify!(sp_zitarev))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_zitarev>(),
        8usize,
        concat!("Alignment of ", stringify!(sp_zitarev))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_zitarev>())).faust as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_zitarev),
            "::",
            stringify!(faust)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_zitarev>())).argpos as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_zitarev),
            "::",
            stringify!(argpos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_zitarev>())).args as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_zitarev),
            "::",
            stringify!(args)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_zitarev>())).in_delay as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_zitarev),
            "::",
            stringify!(in_delay)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_zitarev>())).lf_x as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_zitarev),
            "::",
            stringify!(lf_x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_zitarev>())).rt60_low as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_zitarev),
            "::",
            stringify!(rt60_low)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_zitarev>())).rt60_mid as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_zitarev),
            "::",
            stringify!(rt60_mid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_zitarev>())).hf_damping as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_zitarev),
            "::",
            stringify!(hf_damping)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_zitarev>())).eq1_freq as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_zitarev),
            "::",
            stringify!(eq1_freq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_zitarev>())).eq1_level as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_zitarev),
            "::",
            stringify!(eq1_level)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_zitarev>())).eq2_freq as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_zitarev),
            "::",
            stringify!(eq2_freq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_zitarev>())).eq2_level as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_zitarev),
            "::",
            stringify!(eq2_level)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_zitarev>())).mix as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_zitarev),
            "::",
            stringify!(mix)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sp_zitarev>())).level as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_zitarev),
            "::",
            stringify!(level)
        )
    );
}
extern "C" {
    pub fn sp_zitarev_create(p: *mut *mut sp_zitarev) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_zitarev_destroy(p: *mut *mut sp_zitarev) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_zitarev_init(sp: *mut sp_data, p: *mut sp_zitarev) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_zitarev_compute(
        sp: *mut sp_data,
        p: *mut sp_zitarev,
        in1: *mut f32,
        in2: *mut f32,
        out1: *mut f32,
        out2: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_diskin {
    _unused: [u8; 0],
}
extern "C" {
    pub fn sp_diskin_create(p: *mut *mut sp_diskin) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_diskin_destroy(p: *mut *mut sp_diskin) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_diskin_init(
        sp: *mut sp_data,
        p: *mut sp_diskin,
        filename: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_diskin_compute(
        sp: *mut sp_data,
        p: *mut sp_diskin,
        in_: *mut f32,
        out: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_gen_padsynth(
        sp: *mut sp_data,
        ps: *mut sp_ftbl,
        amps: *mut sp_ftbl,
        f: f32,
        bw: f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_padsynth_profile(fi: f32, bwi: f32) -> f32;
}
extern "C" {
    pub fn sp_padsynth_ifft(
        N: ::std::os::raw::c_int,
        freq_amp: *mut f32,
        freq_phase: *mut f32,
        smp: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_padsynth_normalize(N: ::std::os::raw::c_int, smp: *mut f32) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct openlpc_e_state {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct openlpc_d_state {
    pub _address: u8,
}
